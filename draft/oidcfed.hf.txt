



                                                         R. Hedberg, Ed.
                                                             independent
                                                           S. Gulliksson
                                                               Schibsted
                                                                M. Jones
                                                               Microsoft
                                                              J. Bradley
                                                           Ping Identity
                                                           April 7, 2017


                OpenID Connect Federation 1.0 - draft 03
                     openid-connect-federation-1_0

Abstract

   The OpenID Connect standard specifies how a Relying Party (RP) can
   discover metadata about an OpenID Provider (OP), and then register to
   obtain client credentials.  During discovery and registration there
   is no automated mechanism for the OP or the RP to verify the
   information exchanged during this process.  All the information is
   self-asserted.

   In an identity federation context this is not sufficient.  The
   participants of the federation must be able to trust information
   provided about other participants in the federation.

   This document describes how an identity federation can be built
   around a trusted third party, the federation operator.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2
   2.  Requirements Language . . . . . . . . . . . . . . . . . . . .   3
   3.  Metadata Statement  . . . . . . . . . . . . . . . . . . . . .   3
     3.1.  Metadata Common to All Entities . . . . . . . . . . . . .   3
     3.2.  Specific Client Metadata  . . . . . . . . . . . . . . . .   5
     3.3.  Specific Provider Metadata  . . . . . . . . . . . . . . .   5
     3.4.  Compounded Metadata Statement . . . . . . . . . . . . . .   5
       3.4.1.  Basic components  . . . . . . . . . . . . . . . . . .   5
       3.4.2.  Relationship between Metadata Statements  . . . . . .   7
       3.4.3.  Constructing Entity Metadata  . . . . . . . . . . . .   7
     3.5.  Conceptual Model  . . . . . . . . . . . . . . . . . . . .   8
   4.  Trust Model . . . . . . . . . . . . . . . . . . . . . . . . .   9
     4.1.  Federation Operator . . . . . . . . . . . . . . . . . . .   9
     4.2.  The Building Block  . . . . . . . . . . . . . . . . . . .  10
     4.3.  Constructing a Signed Metadata Statement  . . . . . . . .  10
     4.4.  Verifying the Metadata Statement  . . . . . . . . . . . .  11



Hedberg, et al.          Expires October 9, 2017                [Page 1]

                        OpenID Connect Federation             April 2017


     4.5.  Flattening the compounded metadata statement  . . . . . .  12
   5.  OpenID Connect Communication  . . . . . . . . . . . . . . . .  12
     5.1.  Provider Discovery  . . . . . . . . . . . . . . . . . . .  13
     5.2.  Client Registration . . . . . . . . . . . . . . . . . . .  13
     5.3.  Client Registration response  . . . . . . . . . . . . . .  13
   6.  Belonging to Several Federations  . . . . . . . . . . . . . .  14
     6.1.  Choosing federation . . . . . . . . . . . . . . . . . . .  14
     6.2.  Relying Party . . . . . . . . . . . . . . . . . . . . . .  14
     6.3.  OpenID Provider . . . . . . . . . . . . . . . . . . . . .  15
   7.  Timeouts  . . . . . . . . . . . . . . . . . . . . . . . . . .  16
   8.  Acknowledgements  . . . . . . . . . . . . . . . . . . . . . .  16
   9.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .  17
   10. Security Considerations . . . . . . . . . . . . . . . . . . .  17
   11. Normative References  . . . . . . . . . . . . . . . . . . . .  17
   Appendix A.  Example  . . . . . . . . . . . . . . . . . . . . . .  18
     A.1.  At the beginning of time  . . . . . . . . . . . . . . . .  18
       A.1.1.  SWAMID gets a  key pair for signing Metadata
               Statements  . . . . . . . . . . . . . . . . . . . . .  18
       A.1.2.  Feide gets a key pair for signing Metadata Statements  19
       A.1.3.  UNINETT gets a key pair for signing Metadata
               Statements  . . . . . . . . . . . . . . . . . . . . .  20
     A.2.  A while ago . . . . . . . . . . . . . . . . . . . . . . .  21
       A.2.1.  UNINETT constructs a signing request containing only
               the public parts of the UNINETT signing keys  . . . .  21
         A.2.1.1.  Signed Metadata statement created by Feide  . . .  22
         A.2.1.2.  The same process is repeated for UNINETT/SWAMID .  23
           A.2.1.2.1.  The by SWAMID signed metadata statement . . .  23
       A.2.2.  @UNINETT  . . . . . . . . . . . . . . . . . . . . . .  24
     A.3.  Recent  . . . . . . . . . . . . . . . . . . . . . . . . .  24
     A.4.  And now for the registration request  . . . . . . . . . .  25
       A.4.1.  Metadata statement about Foodle signed by UNINETT . .  26
     A.5.  Foodle client registration  . . . . . . . . . . . . . . .  27
     A.6.  Unpacking the client registration request . . . . . . . .  29
     A.7.  Unpacked and flattened metadata statement per FO  . . . .  29
       A.7.1.  *** https://swamid.sunet.se/ ***  . . . . . . . . . .  29
       A.7.2.  *** https://www.feide.no ***  . . . . . . . . . . . .  29
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  30

1.  Introduction

   The OpenID Connect specification defines how a Relying Party and an
   OpenID Connect Provider can exchange information dynamically about
   each other.  This information is necessary for future successful OIDC
   communication.

   One problem with using dynamic discovery and registration is that the
   correctness of the information that is exchanged can not be easily
   verified by the recipient as it is self-asserted.



Hedberg, et al.          Expires October 9, 2017                [Page 2]

                        OpenID Connect Federation             April 2017


   Another problem that has been raised is the dependency on TLS as the
   sole protection against attacks on the transferred information.
   These last couple of years a number of problems with openSSL, which
   is probably the most widely used TLS library, has been discovered
   that puts reasonable doubt into this dependency.

   We are extending Signed Metadata, as introduced by OAuth 2.0
   Authorization Server Metadata [I-D.draft-ietf-oauth-discovery], to
   create what we call metadata statements.  Metadata statements
   together with the use of a trusted third party (that verifies and
   enforces some common policy), can be used to transfer verified data
   and trust in the data between clients and servers.

2.  Requirements Language

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described inRFC 2119 [RFC2119].

3.  Metadata Statement

   A metadata statement asserts metadata values about an entity (client
   or server).

3.1.  Metadata Common to All Entities

   These extra metadata parameters appear in both provider and client
   metadata statements:

   signing_keys
      OPTIONAL.  A JSON Web Key Set (JWKS) [RFC7517] representing the
      public part of the entity's signing keys.

      The keys that can be found here or at "signing_keys_uri" must not
      be confused with the keys that an OIDC entity is using for
      Authorization/AccessToken/RefreshToken/UserInfo requests and
      responses.  Those keys are found at "jwks_uri" or in the case of
      client registration also possibly as values to "jwks".  The
      signing keys are used to sign metadata statements and can also be
      used by an OP to sign a client registration request response.

   signing_keys_uri
      OPTIONAL.  Location where a JWKS representing the public part of
      the entity's signing keys can be found.  SHOULD return the
      Content-Type "application/jose" to indicate that the JWKS is in
      the form of a JSON Web Signature (JWS) [RFC7515] using the JWS
      Compact Serialization.  The signing key used to sign the JWKS
      belongs to the immediate superior.  That is, the entity that signs



Hedberg, et al.          Expires October 9, 2017                [Page 3]

                        OpenID Connect Federation             April 2017


      this entity's metadata statement also signs the JWKS stored at
      "signing_keys_uri".

   metadata_statements
      OPTIONAL.  JSON array containing a array of metadata statements.
      Each metadata statement is a signed JSON document.

   metadata_statement_uris
      OPTIONAL.  JSON object where the names are the federation
      identifiers and the values are URLs pointing to a compounded
      metadata statement (CMS) rooted in that federation.  Each URL
      points to just one CMS.

   signed_jwks_uri
      OPTIONAL.  This is the signed version of the "jwks_uri" parameter
      defined in OpenID Connect Dynamic Client Registration 1.0
      [OpenID.Registration].  SHOULD return the Content-Type
      "application/jose" to indicate that the JWKS is in the form of a
      JWS using the JWS Compact Serialization.  The key used to sign the
      JWKS can be found in "signing_keys" or "signing_keys_uri".

   federation_usage
      OPTIONAL.  Metadata statements that are used in different contexts
      will contain different parameters.  For example, information that
      an OP publishes about itself is not the same as what an RP wants
      to register.  This together with the differences in the roles
      between an OP and an RP, means that policies for RPs will not be
      the same as for OPs.  There is therefor a need for tagging the
      Metadata statement such that a Metadata statement intended to be
      used in one context can not be used in another.  This is the
      reason for the "federation_usage" parameter.  This parameter can
      be used to limit the usage to a specific context.  The
      "federation_usage" value is a case sensitive string.  The values
      specified in this document are 'discovery', 'registration' and
      'response'.  The corresponding contexts are:

      discovery
         Provider Information Discovery Response [OpenID.Discovery]

      registration
         Client Registration Request [OpenID.Registration]

      response
         Client Registration Request response [OpenID.Registration]

   Metadata statements and signing keys can be transferred in two
   different ways: either by including the information in the statement,
   or by providing a URI that points to the information.  How metadata



Hedberg, et al.          Expires October 9, 2017                [Page 4]

                        OpenID Connect Federation             April 2017


   statements and signing keys are transferred is independent of each
   other.  It is NOT allowed to divide the information (metadata
   statements or signing keys) into two pieces and send one in the
   statement and leave the rest to be fetched using the URI.

   Along the same line if both "jwks_uri" and "signed_jwks_uri" are
   present, which they might be for backward compatibility reasons, then
   "signed_jwks_uri" SHOULD be preferred.

   Metadata statements that do not contain "metadata_statements" or
   "metadata_statement_uris" are called level 0 metadata statements.

   An OP MUST sign it's JWKs and therefore publish a signed_jwks_uri.
   An RP that is able to handle secrets MUST also sign it's JWKS and
   publish a signed_jwks_uri.

3.2.  Specific Client Metadata

   All parameters defined in section 2 of OpenID Connect Dynamic Client
   Registration 1.0 [OpenID.Registration] are allowed in a metadata
   statement.

   To that list is added:

   scopes
      RECOMMENDED.  JSON array containing a list of the RFC6749
      [RFC6749] scope values that this clients expects to use.

   claims
      RECOMMENDED.  JSON array containing a list of the Claim Names of
      the Claims that the OpenID Client wants values for.

3.3.  Specific Provider Metadata

   All parameters defined in section 3 of OpenID Connect Discovery 1.0
   [OpenID.Discovery]

3.4.  Compounded Metadata Statement

3.4.1.  Basic components

   To describe Compounded Metadata Statements we need a way of
   describing the different components in such a statement.  These are
   the basic components:

   ms_X
      Metadata Statement signing request by X without signing keys and
      signed metadata statements.



Hedberg, et al.          Expires October 9, 2017                [Page 5]

                        OpenID Connect Federation             April 2017


   SK[X]
      Signing keys that belongs to X

   X(MS)
      Metadata Statement signed by X

   Using these basic components we can now describe a simple signed
   Metadata Statement as:

   A(ms_B + SK[B])

   B being the entity that requested a signature by A of B's metadata
   statement and signing keys.

   Creating a compounded metadata statements involves adding previously
   signed metadata statements to the request before signing it.  So if
   we start of with C sending this signing request to B,

   (ms_C + SK[C])

   then B may want to add the signed metadata statement it received from
   A before signing.  So we first get:

   (ms_C + SK[C] + A(ms_B + SK[B]))

   which is then signed by B before being returned to C.

   This is the resulting compounded metadata statement :

   B(ms_C + SK[C) + A(ms_B + SK[B]))

   Here we have three entities involved: A which is the top level entity
   (the federation operator) a second level entity (B) representing a
   federation member and C which could be an entity within the
   federation like an OP or an RP owned/controlled by B.  If we assume
   that C is an RP then ms_C would typically be a client registration
   request and SK[C] would be the signing keys that the RP used to sign
   the JWKS placed at signed_jwks_uri.  The statement signed by A (ms_b
   + SK[B]) would contain metadata common to all RPs owned by the member
   (ms_B) and the signing key (SK[B]) that the member uses to sign
   requests from the member's RPs.

   Note that the level N requester is the level N+1 signer.








Hedberg, et al.          Expires October 9, 2017                [Page 6]

                        OpenID Connect Federation             April 2017


3.4.2.  Relationship between Metadata Statements

   The metadata for each entity in the federation is described by one or
   more metadata statements (for example, ms_0, ms_1, ..., ms_n).  ms_0
   (the level 0 metadata statement mentioned above) would be the most
   generic, and ms_1, ...,ms_n would in turn be successively more
   specific.  ms_0 would typically contain information that belongs to
   the organization, for instance "tos_uri", "contacts" and the like,
   while ms_n would contain information that belongs to one specific
   entity like "authorization_endpoint" for an OP or "redirect_uris" for
   a RP.

3.4.3.  Constructing Entity Metadata

   The metadata for a specific entity is constructed by starting with
   the information in ms_0 and then adding the information in ms_1 to
   ms_n using the following rule:

   *Given two metadata statements ms_i and ms_j (j > i, i=0,..,n-1,
   j=1,..,n) For every claim in ms_j: If the claim does not appear in
   ms_i add it to ms_i.  If the claim appears in ms_i then replace the
   value of the claim in ms_i with the value of the claim in ms_j if and
   only if the value in ms_j is a subset of the value in ms_i else an
   error MUST be generated.  *

   A subset is defined as:

   String
      One string is a subset of another string if it is exactly the
      same, byte by byte.

   Simple lists
      An array A is a subset of B if every element in A is also in B.

   Booleans
      Boolean A is a subset of B if A is equal to B.

   Integer/Floats
      The number A is a subset of the number B if A is less or equal to
      B.

   Associative array/dictionary
      A dictionary A is a subset of a dictionary B if every key in A is
      in B and the value of A[x] is a subset of B[x].

   The following is a non-normative example of a set of client-specific
   metadata statements who together form the metadata for an entity:




Hedberg, et al.          Expires October 9, 2017                [Page 7]

                        OpenID Connect Federation             April 2017


   ms_0

   {
     "contacts": ["helpdesk@example.com"],
     "logo_uri": "https://example.com/logo.jpg",
     "policy_uri": "https://example.com/policy.html",
     "tos_uri": "https://example.com/tos.html"
   }

   ms_1

   {
     "scope": "openid eduperson",
     "response_types": ["code", "code id_token"],
   }

   ms_2

   {
     "contacts": ["rp_helpdesk@example.com"],
     "redirect_uris": ["https://example.com/rp1"],
     "response_types: ["code"]
   }

   The metadata for the entity in question, using the rules above, would
   then be:

   sum(ms_0...2)

   {
     "contacts": ["helpdesk@example.com"],
     "logo_uri": "https://example.com/logo.jpg",
     "policy_uri": "https://example.com/policy.html",
     "tos_uri": "https://example.com/tos.html"
     "scope": "openid eduperson",
     "response_types": ["code"],
     "redirect_uris": ["https://example.com/rp1"],
   }

3.5.  Conceptual Model

   A set of metadata statements that, like the ones above, together
   describe an entity are brought together using the
   "metadata_statement" parameter.







Hedberg, et al.          Expires October 9, 2017                [Page 8]

                        OpenID Connect Federation             April 2017


   The following is a non-normative example of a compounded metadata
   statement.  Also note that the the metadata_statement MUST be a
   signed JWT.  In this example, the only the parts of the signed JWT
   payload pertinent to the example are shown.

   {
     "contacts": ["rp_helpdesk@example.com"],
     "redirect_uris": ["https://example.com/rp1"],
     "response_types: ["code"]
     "metadata_statements": [
       {
         "scope": "openid eduperson",
         "response_types": ["code", "code id_token"],
         "metadata_statements" : [
           {
             "contacts": ["helpdesk@example.com"],
             "logo_uri": "https://example.com/logo.jpg",
             "policy_uri": "https://example.com/policy.html",
             "tos_uri": "https://example.com/tos.html"
           }
         ]
       }
     ]
   }

4.  Trust Model

   The trust model is based on linking together signing keys,
   represented as JWK Sets [RFC7517].  Each signature chain is rooted in
   the trusted third party's signing keys.  By verifying such signature
   chains, the entities can establish trust in the metadata.

4.1.  Federation Operator

   The Federation Operator (FO) is the trusted third party.  The FO MUST
   have a globally unique identifier.  Every time it signs a metadata
   statement it MUST set "iss" to the identifier.  It will publish a
   JWKS, containing the signing keys that the FO will use for signing
   metadata submitted to it, at a HTTPS URL which server certificate
   MUST appear in a well-known Certificate Transparency log [RFC6962].
   The key IDs of the FO's signing keys MUST be globally unique.

   For the following description, this is assumed to be true: A
   federation consists of a number of members, and each member has one
   or more representatives registered with the federation.  These
   representatives are allowed to issue metadata signing requests on
   behalf of the member to the federation.  Below such a representative
   is called a Level 0 Requester (L0Req).  Within each member unless all



Hedberg, et al.          Expires October 9, 2017                [Page 9]

                        OpenID Connect Federation             April 2017


   entities belonging to the member are handled directly by the L0Req
   there may exists parties that are responsible for single or groups of
   entities.  Within these parties we may have further subdivisions such
   that we end up with Level 0, 1, 2, 3 or more requesters.  This
   document makes no assumption on the number of levels.

4.2.  The Building Block

   Even though we talk about a chain of trust model, the actual
   representation is as we have seen above a compounded metadata
   statement.

   The innermost metadata statement in the nest of metadata statements
   is the one that the FO has signed.  That statement MUST NOT contain
   any references to other metadata statements.  See simple signed
   metadata (Section 3.4.1, Paragraph 2) above.  All other metadata
   statements in the nest MUST contain at least one reference to another
   metadata statement.  An example of this is can be seen here
   (Section 3.4.1, Paragraph 4).

4.3.  Constructing a Signed Metadata Statement

   These are the steps that are preformed to construct a signed metadata
   statement.  A metadata signing request may be about one specific
   entity or a group of similar entities.

   1.  The "requester" constructs a signing request by collecting the
       necessary client or provider metadata as described in Section 3.

   2.  If this is about the top most metadata statement (ms_0) then no
       metadata statement will be added to the metadata statement.  If
       it is a more specific metadata statement (ms_1...n) then more
       general metadata statement/-s MUST be added.  Dependent on setup
       the metadata statement can be added by the requester or the
       signer.

   3.  The metadata statement is transported to the signing party.  In
       the case of ms_0 this MUST be the FO.  If it is ms_1 it is the
       "LOReq".  If it is ms_2 it is the L1Req and so on.

   4.  The signing party verifies the information in the metadata
       statement, modifies and/or adds more information according to the
       policy before signing the statement.

   5.  Once signed by the signer the signed metadata is sent back to the
       "requester".





Hedberg, et al.          Expires October 9, 2017               [Page 10]

                        OpenID Connect Federation             April 2017


   An example of the construction of a compounded metadata statement.
   The Level 0 Requester (L0Req) sends a metadata statement request to
   the federation operator (FO).

   L0Req -- (ms_L0Req + SK[L0Req]) --> FO

   The FO verifies the information and if the federations policy so
   demands may add extra information.  After signing with the FOs
   signing key the signed metadata statement is returned to the L0Req.

   L0Req <-- FO(ms_L0Req + SK[L0Req]) --- FO

   Next step that happens some time later is that the L1Req sends a
   Metadata Statement signing requests to the L0Reg.

   L1Req -- (ms_L1Req + SK[L1Req]) --> L0Req

   The L0Req verifies the information in the request and adds the signed
   L0Req metadata.  The L0Req may also add other information to the
   Metadata Statement before it signs and returns it to the L1Req.

   L1Req <- L0Req(ms_L1Req + SK[L1Req] + FO(ms_L0Req+SK[L0Req])) - L0Req

   This was an example using 3 levels.  As said before this document
   makes no assumption as to how many levels should be used.

4.4.  Verifying the Metadata Statement

   Verifying a metadata statement you first grab the innermost signed
   metadata statement.  If this is signed by a FO you have the public
   part of the signing keys from then you can verify the signature of
   the metadata statement.  If the verification concludes that the
   signature was correct you can now take the signing keys that was
   included in the signed document and use those to verify the second
   innermost signed metadata statement.  And so on.

   Verifying the received metadata statement involves running a function
   similar to this:













Hedberg, et al.          Expires October 9, 2017               [Page 11]

                        OpenID Connect Federation             April 2017


   def unpack(ms, sign_keys):
       keys = []
       pl = get_payload(ms)
       if 'metadata_statements' in pl:
           msl = []
           for statement in pl['metadata_statements']:
               _ms = unpack(statement, sign_keys)
               if _ms:
                   keys.append(get_keys(_ms))
                   msl.append(_ms)
           pl['metadata_statements'] = msl
       elif 'metadata_statement_uris' in pl:
           msl = []
           for _iss, uri in pl['metadata_statement_uris'].items():
               statement = html_get(uri)
               _ms = unpack(statement, sign_keys)
               if _ms:
                   keys.append(get_keys(_ms))
                   msl.append(_ms)
           pl['metadata_statements'] = msl
       else:
           return verify_signature(ms, pl['iss'], sign_keys):

       if verify_signature(ms, pl['iss'], keys):
           return pl

   where the function get_payload unpacks the payload from the JWS
   without verify the signature.  The function verify_signature, on the
   other hand, does verify the signature of the JWS and if everything is
   correct returns the JWS payload.

4.5.  Flattening the compounded metadata statement

   Once you have a verified compounded metadata statement you have to
   flatten it to get a useful metadata statement.  To do this you use
   the method outlined in Section 3.4.3

5.  OpenID Connect Communication













Hedberg, et al.          Expires October 9, 2017               [Page 12]

                        OpenID Connect Federation             April 2017


   The trust between the entities is established using the above
   described extensions in the first two steps of the communication
   between an RP and an OP.  How the RP found the OP in the first place
   is out of scope for this document.

   ------                             ------
   |    | <--- 1) Discovery --------> |    |
   | RP | <--- 2) Registration -----> | OP |
   |    |                             |    |
   ------                             ------


   After the discovery and registration is completed a first time, those
   steps SHOULD only be repeated if any changes occur (see notes in
   respective sections below).

5.1.  Provider Discovery

   The OP MUST publish its provider metadata as specified by OpenID
   Connect Discovery 1.0 [OpenID.Discovery].  The RP makes a standard
   OpenID Provider Configuration Request.  The OP responds with its
   provider configuration and the additional metadata parameters
   specified above.

   The OP SHOULD have the complete response signed by it's superior in
   the signing chain and MAY have them signed in advance.

5.2.  Client Registration

   The OP MUST support dynamic client registration as described in
   OpenID Connect Dynamic Client Registration 1.0 [OpenID.Registration].
   The RP makes a Client Registration Request including the additional
   metadata specified above.

   The RP SHOULD have the complete request signed by it's superior in
   the signing chain and MAY have it signed in advance.

5.3.  Client Registration response

   It is unlikely that an OP can prepare a number of signed Metadata
   statements representing client registration responses in advance.
   Still if the OP wants to have the whole response signed it has two
   choices.  Either the superior signer has a service that can sign
   statements on-the-fly or the OP signs it itself.  If the later the OP
   needs to have a blank (only containing signing_keys) metadata
   statement signed by the superior.  Once it has that it can sign the
   response plus the signed metadata statement and construct a




Hedberg, et al.          Expires October 9, 2017               [Page 13]

                        OpenID Connect Federation             April 2017


   compounded metadata statement that can be verified using the method
   described inSection 4.4.

6.  Belonging to Several Federations

6.1.  Choosing federation

   This draft allows any entity to belong to more then one federation.
   During the provider discovery and client registration process the
   parties has to agree on which federation to use.  Ultimately the OP
   decides.

      The client asks for the provider information

      The OP, using some rule, may publish one or several
      "metadata_statements".  If it publishes more than one
      "metadata_statements", then they SHOULD be rooted in different
      federations.

      Based on what the OP published, the RP publishes a number of
      "metadata_statements", all rooted in federations that the OP
      belongs to.

      If the RP published more than one "metadata_statements", then the
      OP should/must choose one and make that known in the client
      registration response.  One way of doing this is described in
      Section 5.3

6.2.  Relying Party

   An organization may be a member of more than one federation.  The RPs
   it is responsible for may be members of one or more of these.

   This is then how to deal with this.  The organization registers and
   gets metadata signed by each federation.  One extreme is that it will
   mint a new key pair for each federation, the other is that it will
   use the same key pair for all federations.  It does not matter which
   it chooses, but the end result MUST be that there is one signed RP
   registration request per signing key.  This is then published using
   "metadata_statement_uris" or "metadata_statements".











Hedberg, et al.          Expires October 9, 2017               [Page 14]

                        OpenID Connect Federation             April 2017


   The following is a non-normative example of an absolutely minimal
   client registration request sent to an OP:

   {
     "redirect_uris": ["https://example.com/rp2/callback"],
     "metadata_statement_uris": {
         https://swamid.sunet.se/":
           "https://dev.example.com/rp1/idfed/swamid.jws",
         "https://www.incommon.org":
           "https://dev.example.com/rp1/idfed/incommon.jws"
     }
   }

   As described above, when the OP receives a request like this it will
   chose which federation it will work within and then signal that by
   only returning that corresponding information in the
   "metadata_statements" / "metadata_statement_uris" in the registration
   response.

   The following is a non-normative example of an OPs response on the
   client registration request above:

   {
     "client_id": "abcdefgh",
     "client_secret": "0123456789",
     "client_id_issued_at": 1462375583,
     "client_secret_expires_at": 1462379183,
     "redirect_uris": ["https://example.com/rp2/callback"],
     "metadata_statement_uris": {
       "https://swamid.sunet.se/":
         "https://dev.example.com/rp1/idfed/swamid.jws",
     }
   }

6.3.  OpenID Provider

   An OP has the choice of whether it wants one key pair per federation,
   one key pair for everyone, or anything in between.  And, like the RP
   owner, it has to produce one signed metadata statement per key used.












Hedberg, et al.          Expires October 9, 2017               [Page 15]

                        OpenID Connect Federation             April 2017


   The following is a non-normative example of an OPs response to a
   provider configuration request:

     {
       "issuer": "https://foo.example.org/op/fDTowvP0slEdEAcc",
       "response_types_supported": ["code", "code id_token", "token"],
       "grant_types_supported": ["authorization_code", "implicit",
           "urn:ietf:params:oauth:grant-type:jwt-bearer"],
       "subject_types_supported": ["pairwise", "public"],
       "id_token_signing_alg_values_supported": ["RS256"],
       "metadata_statement_uris": {
         "https://swamid.sunet.se/":
           "https://foo.example.org/op/idfed/swamid.jws",
         "https://www.incommon.org":
           "https://foo.example.org/op/idfed/incommon.jws"
         "https://www.switch.ch":
           "https://foo.example.org/op/idfed/switch.jws"
         "https://www.aco.net/":
           "https://foo.example.org/op/idfed/aconet.jws"
     }

7.  Timeouts

   There are a number of timeouts that MUST considered

      Each signature has a timeout.

      A client registration has a timeout.

   Taking this into consideration, an OP MUST NOT assign a lifetime to a
   client registration that exceeds the lifetime of the metadata
   statement signatures.

8.  Acknowledgements

      Heather Flanagan

      Andreas Akre Solberg

      The JRA3T3 task force of GEANT4-2

      Michael Schwartz

      Peter Schober







Hedberg, et al.          Expires October 9, 2017               [Page 16]

                        OpenID Connect Federation             April 2017


9.  IANA Considerations

   TBD

10.  Security Considerations

   TBD

11.  Normative References

   [I-D.draft-ietf-oauth-discovery]
              Sakimura, N., Bradley, J., and M. Jones, "OAuth 2.0
              Authorization Server Metadata", August 2016,
              <https://tools.ietf.org/html/draft-ietf-oauth-discovery-
              04>.

   [OpenID.Core]
              Sakimura, N., Bradley, J., Jones, M., de Medeiros, B., and
              C. Mortimore, "OpenID Connect Discovery 1.0", August 2015,
              <http://openid.net/specs/openid-connect-core-1_0.html>.

   [OpenID.Discovery]
              Sakimura, N., Bradley, J., Jones, M., and E. Jay, "OpenID
              Connect Discovery 1.0", August 2015,
              <http://openid.net/specs/
              openid-connect-discovery-1_0.html>.

   [OpenID.Registration]
              Sakimura, N., Bradley, J., and M. Jones, "OpenID Connect
              Dynamic Client Registration 1.0", August 2015,
              <http://openid.net/specs/
              openid-connect-registration-1_0.html>.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <http://www.rfc-editor.org/info/rfc2119>.

   [RFC6749]  Hardt, D., Ed., "The OAuth 2.0 Authorization Framework",
              RFC 6749, DOI 10.17487/RFC6749, October 2012,
              <http://www.rfc-editor.org/info/rfc6749>.

   [RFC6962]  Laurie, B., Langley, A., and E. Kasper, "Certificate
              Transparency", RFC 6962, DOI 10.17487/RFC6962, June 2013,
              <http://www.rfc-editor.org/info/rfc6962>.






Hedberg, et al.          Expires October 9, 2017               [Page 17]

                        OpenID Connect Federation             April 2017


   [RFC7515]  Jones, M., Bradley, J., and N. Sakimura, "JSON Web
              Signature (JWS)", RFC 7515, DOI 10.17487/RFC7515, May
              2015, <http://www.rfc-editor.org/info/rfc7515>.

   [RFC7517]  Jones, M., "JSON Web Key (JWK)", RFC 7517,
              DOI 10.17487/RFC7517, May 2015,
              <http://www.rfc-editor.org/info/rfc7517>.

   [RFC7591]  Richer, J., Ed., Jones, M., Bradley, J., Machulak, M., and
              P. Hunt, "OAuth 2.0 Dynamic Client Registration Protocol",
              RFC 7591, DOI 10.17487/RFC7591, July 2015,
              <http://www.rfc-editor.org/info/rfc7591>.

Appendix A.  Example

   The story is that the organisation UNINETT has applied and been
   accepted as a member of two federations: Feide and SWAMID.

   Now UNINETT is running a service (Foodle) that needs signed metadata
   statements to prove that it belongs to the federation that the OP
   belongs to when a user of the Foodle service wants to log in using an
   OP that belongs to either or both of the federations.

A.1.  At the beginning of time

A.1.1.  SWAMID gets a key pair for signing Metadata Statements

























Hedberg, et al.          Expires October 9, 2017               [Page 18]

                        OpenID Connect Federation             April 2017


   {
     "keys": [
       {
         "d": "AxSRj35tfb367NLWIr4dpsVIcJoTp5DMDa9FmIzKax4xGg5dYe41YP_-
   uV0rqLPLHVNs4XHCAgRGGvL4yGXMoRhNixPnO_a1h6uxf9TVKv-rM6OO4KH1Zk4CDt-8
   Q-ocJjm_VWBT1rS4AxH7VhCmXiLVafJeKiIBcH5PgqIPzEKP1iq7hgHCBcuDqQVAcLT-
   69Sy-VVqq4kw250tUxcgendDf6wm6CdyzslNWhgTwRQ_vHm1KQ4wqcyReeKRpwPtsAgP
   GhH7T9dDMTN-zhzbiDNp0ak2MhmDQem5oM0JzOtCqJl59NA8zuW_1E6DNhxmquuDSqr6
   qr9eUlERU9LkyQ",
         "e": "AQAB",
         "kid": "UFP_IHND_nD-ZzScunT-QnCcomMZ2eFboHHZN8_BZsI",
         "kty": "RSA",
         "n": "wXYJlUeCbwEFt5HWb6-hB7Y1NT2Egx22w9oK_v2pYHDnppHVI9cbKPBa
   nTrDATcIAJ-DlizCvDxhczNUmzC0SlFcNtFXbUeiYLbPrSkXof_NyH806j-MRQmIvdVY
   2Hi3lnvIV0DxKnS1AB8C1S_Sj8_OJP2yWpFf7E_6V_fDumv-oCXLqK9t-2gCjT-W9KuI
   9R3OgCZXq3yBy4x2G-L1Pw_jUqYbXjSSLnecOe8C64O6h8scPlS84WH-hLz6hWSJcipV
   VwlWmrB34y_uYpsEILpMIFeolsBxz6iXWtrJ-H1gbS2BzzPXw5GEEwImxevimZbC365E
   lzYyQG8WVIko6w",
         "p": "zgJbo-RWrPy_SHmyB6KxRBQtyShfC5hIGP47edEwd1PpZnUHsDPFtNFv
   bprVTU10E3zDWA-0VwoFkgS68-ppnr-o5VaHOaIcrOfGvZ1_lDGly0zxd_uzT1VI_hDQ
   f9W1Vxha59nUAM2lC7gYan3CDtxdYHuJmONDDkFlShj4LwM",
         "q": "8GgrIs07bg-T4owH3ZcNnlfkamj6cnsDP0RKvqYYCngIMsrQcjSG6o2z
   38FXUvUHerTPrO8fi_4Q6vpqZ13forQKLN99ueblO9eMBowHSOmS16da8J8MT6L6wkCt
   SQrY0ojr-qtcQKn7AvOrLB8LF70uDB0tTDbyQ9fvgybIJfk",
         "use": "sig"
       }
     ]
   }

A.1.2.  Feide gets a key pair for signing Metadata Statements





















Hedberg, et al.          Expires October 9, 2017               [Page 19]

                        OpenID Connect Federation             April 2017


   {
     "keys": [
       {
         "d": "DWHEdq0Ox3lJKFglkkOjF3eBkJ0XRrXj9IAleLL-tZ5FPqEoMcJ6BOUE
   i2FhkaP7xZNzq3jngGdPSpbPTBZFNbAkhZmuH1COsRFQqBeZ8yRUlo9NMDabBoDAghDK
   QPpj7u8OeSjBAghu-kodRv4xHoyMkrmACfLuImuQeOHoihFKEcoCwyl8u5xHBdln4mdM
   ZeE1jTuYir2-yba_H9g2VX7rFQ5aHn0L94JP5XLxficpsfNK29RRgl7UTiVLfvq5Kd9b
   SodEr0fICbb3RTnt2QSdun58djlwyL89RYUS6oxp6hyPt14TbgEsvN7JNMue_m_GMwF0
   Nko1SemezgbQwQ",
         "e": "AQAB",
         "kid": "VXiuYUzeyjQFzVM22s_ky01oVXyEk7H-xgnqttRZ1Tk",
         "kty": "RSA",
         "n": "xu-k-PmNOikXhpgUWSYktL9XX2re6vWdeoD4lk-x_XGa8_lPz9dWoeZ5
   kBhxwnpvSz4A7LmlqVlhZ-vmu9SF5_rJMkVgilyBW302DrTjrRfDiwqVRNRf4RgSDI9z
   V4Tx_rjNHU8wCk3QXedpUMXoaJ9Kx9JmzzDP97yTLKYLq64Jq2ABe37WQcKXZb7INgue
   -rsI86jXM_ourFa0x3Z9LZz7GZpGmpiIcmqgzxuCTl4JxSYP4DY4D9NFXdXeQx6T-D7g
   eLDLYh1-ygFBAthgksMyJ3HlFXo0m2-oAnCi8Gecu8u0k_NLt06VHVEO8yu5-oVywXT4
   Pdobspf1hzCqZQ",
         "p": "1If8HqTzkuv-KfQLRyzz0imMZNy4xaQf3shKdZ-QSH8aMmAzSStNzf0z
   xMhFxAVUOh_XWEc-xsLYD3AwLqFdrzB8r1tIU9lLt23y84iHI-Hmarhu1RWoPD5vaNIJ
   60ZmXzAxFYUGh-vxh9PQxkEtXFA2I2fjsANlqyJlnV20QmE",
         "q": "75_UKSZ9zAZ4_MCuFwpcIWoLVq-nAERCKv1sGZvJZJO54zwIpUtWUNrg
   xthcCGBm_h-4EQv2lLZUOKFHolFmwuQf2UMe8Dq3vryJ0VBSRyzuKBWLEGwvDihUl4bn
   qi9QRnyQuv5x9ZWdLP2S3J96u_eOTsC_lH0YKZhcWFtU7oU",
         "use": "sig"
       }
     ]
   }

A.1.3.  UNINETT gets a key pair for signing Metadata Statements





















Hedberg, et al.          Expires October 9, 2017               [Page 20]

                        OpenID Connect Federation             April 2017


   {
     "keys": [
       {
         "d": "DWHEdq0Ox3lJKFglkkOjF3eBkJ0XRrXj9IAleLL-tZ5FPqEoMcJ6BOUE
   i2FhkaP7xZNzq3jngGdPSpbPTBZFNbAkhZmuH1COsRFQqBeZ8yRUlo9NMDabBoDAghDK
   QPpj7u8OeSjBAghu-kodRv4xHoyMkrmACfLuImuQeOHoihFKEcoCwyl8u5xHBdln4mdM
   ZeE1jTuYir2-yba_H9g2VX7rFQ5aHn0L94JP5XLxficpsfNK29RRgl7UTiVLfvq5Kd9b
   SodEr0fICbb3RTnt2QSdun58djlwyL89RYUS6oxp6hyPt14TbgEsvN7JNMue_m_GMwF0
   Nko1SemezgbQwQ",
         "e": "AQAB",
         "kid": "VXiuYUzeyjQFzVM22s_ky01oVXyEk7H-xgnqttRZ1Tk",
         "kty": "RSA",
         "n": "xu-k-PmNOikXhpgUWSYktL9XX2re6vWdeoD4lk-x_XGa8_lPz9dWoeZ5
   kBhxwnpvSz4A7LmlqVlhZ-vmu9SF5_rJMkVgilyBW302DrTjrRfDiwqVRNRf4RgSDI9z
   V4Tx_rjNHU8wCk3QXedpUMXoaJ9Kx9JmzzDP97yTLKYLq64Jq2ABe37WQcKXZb7INgue
   -rsI86jXM_ourFa0x3Z9LZz7GZpGmpiIcmqgzxuCTl4JxSYP4DY4D9NFXdXeQx6T-D7g
   eLDLYh1-ygFBAthgksMyJ3HlFXo0m2-oAnCi8Gecu8u0k_NLt06VHVEO8yu5-oVywXT4
   Pdobspf1hzCqZQ",
         "p": "1If8HqTzkuv-KfQLRyzz0imMZNy4xaQf3shKdZ-QSH8aMmAzSStNzf0z
   xMhFxAVUOh_XWEc-xsLYD3AwLqFdrzB8r1tIU9lLt23y84iHI-Hmarhu1RWoPD5vaNIJ
   60ZmXzAxFYUGh-vxh9PQxkEtXFA2I2fjsANlqyJlnV20QmE",
         "q": "75_UKSZ9zAZ4_MCuFwpcIWoLVq-nAERCKv1sGZvJZJO54zwIpUtWUNrg
   xthcCGBm_h-4EQv2lLZUOKFHolFmwuQf2UMe8Dq3vryJ0VBSRyzuKBWLEGwvDihUl4bn
   qi9QRnyQuv5x9ZWdLP2S3J96u_eOTsC_lH0YKZhcWFtU7oU",
         "use": "sig"
       }
     ]
   }

A.2.  A while ago

   Now is the time to construct the signed metadata statements and get
   them signed by the federations.  We'll start with Feide and UNINETT

A.2.1.  UNINETT constructs a signing request containing only the public
        parts of the UNINETT signing keys















Hedberg, et al.          Expires October 9, 2017               [Page 21]

                        OpenID Connect Federation             April 2017


   UNINETT Metadata Statement request

   {
     "federation_usage": "registration",
     "signing_keys": {
       "keys": [
         {
           "e": "AQAB",
           "kid": "dif1npSsQnZDxpF8v9v5kDF7wt9z4m8s3C7hulDn8H4",
           "kty": "RSA",
           "n": "3bzJyaeHgzt-PYKcRc-lZ6i0v5HjMjmmffmtZlmp9KsD6nRGaArENj
   r2hp2rq2xWQO_dHTpx9VK1OaiSFeyHc7Yykboc1wCE9ktFdfozY_G0-wYLcgXPLt9gLb
   58ZcQ0RWF6OzgyKFpV-mrVKjcT9mugehBjdU8OBJ833YEyVNDvXyXM186tgo201psVf8
   lYhQ3oS-3xFfieRm__cZQt8_AFoDCueEc-G2eY8VWLPrndaOBS4vovhNf6djr8rR0pPI
   uH4zyu6GKQEyTXiSBwI4VYGHhTGUNZTk8ImpzNTj2jhER7ncAGtiOBYLRi4BrSEODQqv
   HLvY4eu0ke2zRm1Q",
           "use": "sig"
         }
       ]
     }
   }

   UNINETT sends the Metadata statement signing request to Feide and
   Feide adds claims representing the Feide federation policiy.

A.2.1.1.  Signed Metadata statement created by Feide

























Hedberg, et al.          Expires October 9, 2017               [Page 22]

                        OpenID Connect Federation             April 2017


   {
     "claims": [
       "sub",
       "name",
       "email",
       "picture"
     ],
     "exp": 1494156899,
     "federation_usage": "registration",
     "iat": 1491564899,
     "id_token_signing_alg_values_supported": [
       "RS256",
       "RS512"
     ],
     "iss": "https://www.feide.no",
     "jti": "1e03cf86dadd4227bcecf363c42a3b71",
     "kid": "VXiuYUzeyjQFzVM22s_ky01oVXyEk7H-xgnqttRZ1Tk",
     "signing_keys": {
       "keys": [
         {
           "e": "AQAB",
           "kid": "dif1npSsQnZDxpF8v9v5kDF7wt9z4m8s3C7hulDn8H4",
           "kty": "RSA",
           "n": "3bzJyaeHgzt-PYKcRc-lZ6i0v5HjMjmmffmtZlmp9KsD6nRGaArENj
   r2hp2rq2xWQO_dHTpx9VK1OaiSFeyHc7Yykboc1wCE9ktFdfozY_G0-wYLcgXPLt9gLb
   58ZcQ0RWF6OzgyKFpV-mrVKjcT9mugehBjdU8OBJ833YEyVNDvXyXM186tgo201psVf8
   lYhQ3oS-3xFfieRm__cZQt8_AFoDCueEc-G2eY8VWLPrndaOBS4vovhNf6djr8rR0pPI
   uH4zyu6GKQEyTXiSBwI4VYGHhTGUNZTk8ImpzNTj2jhER7ncAGtiOBYLRi4BrSEODQqv
   HLvY4eu0ke2zRm1Q",
           "use": "sig"
         }
       ]
     }
   }

A.2.1.2.  The same process is repeated for UNINETT/SWAMID

   SUNET gets the same signing request as Feide got but adds a different
   set of policy claims

A.2.1.2.1.  The by SWAMID signed metadata statement










Hedberg, et al.          Expires October 9, 2017               [Page 23]

                        OpenID Connect Federation             April 2017


   {
     "exp": 1494156899,
     "federation_usage": "registration",
     "iat": 1491564899,
     "iss": "https://swamid.sunet.se/",
     "jti": "64c3b83e19e44754b86ca37b73b72f15",
     "kid": "UFP_IHND_nD-ZzScunT-QnCcomMZ2eFboHHZN8_BZsI",
     "response_types": [
       "code",
       "token"
     ],
     "scopes": [
       "openid",
       "email"
     ],
     "signing_keys": {
       "keys": [
         {
           "e": "AQAB",
           "kid": "dif1npSsQnZDxpF8v9v5kDF7wt9z4m8s3C7hulDn8H4",
           "kty": "RSA",
           "n": "3bzJyaeHgzt-PYKcRc-lZ6i0v5HjMjmmffmtZlmp9KsD6nRGaArENj
   r2hp2rq2xWQO_dHTpx9VK1OaiSFeyHc7Yykboc1wCE9ktFdfozY_G0-wYLcgXPLt9gLb
   58ZcQ0RWF6OzgyKFpV-mrVKjcT9mugehBjdU8OBJ833YEyVNDvXyXM186tgo201psVf8
   lYhQ3oS-3xFfieRm__cZQt8_AFoDCueEc-G2eY8VWLPrndaOBS4vovhNf6djr8rR0pPI
   uH4zyu6GKQEyTXiSBwI4VYGHhTGUNZTk8ImpzNTj2jhER7ncAGtiOBYLRi4BrSEODQqv
   HLvY4eu0ke2zRm1Q",
           "use": "sig"
         }
       ]
     },
     "token_endpoint_auth_method": "private_key_jwt"
   }

A.2.2.  @UNINETT

   Now UNINETT sits with two signed metadata statements one for each of
   the federations it belongs to

A.3.  Recent

   Time to create the Foodle (RP) metadata statement

   We take a road similar to the request/request_uri path.  That is we
   include all the information about the client that needs to be protect
   from tampering by a MITM and places it in the metadata statement
   signing request.




Hedberg, et al.          Expires October 9, 2017               [Page 24]

                        OpenID Connect Federation             April 2017


   But first Foodle needs it's own signing keys.  Not for signing
   Metadata Statements but for signing the JWKS document found at the
   URI pointed to by jwks_uri.  It is vital to protect this key
   information from tampering since a lot of the security of the future
   OIDC communication will depend on the correctness of the keys found
   at the jwks_uri.

   Foodle gets a key pair for signing the JWKS documents

   {
     "keys": [
       {
         "d": "BUvo18TnwNf1OF7QBw_9GigYfofShIriVAJ2e8WizFG3SDD-ryf3xYTJ
   d1Ti9zISOwf4euWW7n5eXJ5WpnJ3yvJOsmHdORNZg6MW0aZYty2f7UUJK2WQVKBwM-Ua
   VYWBG6EJzy0WYCNe1iP-LY65jZ_Q8JZVzk7ApjWdOUk2VHwU9dU-eku-3xuQEAPGobK8
   slTyZiLY4Ju9ONMlgvjl8tJrXxnfi4wD6nmstSlEh1IO5SRrElrWpsR666f621d81Jgp
   gQJCFarM7e9MZV13_29HiPRUT77UdHUxkb7g1hx9li8gnlG3eFfcc4hfcf5CykPt32-H
   3P6mgSrFwO08oQ",
         "e": "AQAB",
         "kid": "cd2b2P06oG6Grt1aLG6U_Mf-Bbg28IwTdnvzaSz868U",
         "kty": "RSA",
         "n": "zQgJBilcDKh1Y6cl716IHJvYejnryvxZ9FM9lA2x9-mPfC-c1Bii7XxL
   BL2p0n24fiPqDewDpEKpgWQkaM6XH1DYCI15QxKwKJ2hdCesKEYGydxhcfkAyOyehPXn
   S7tyCH1rixkvNj8NFNdfWJhJPSUhx_E9o9iHBoq50rPiA7LHCQfIW4JSouvLhFVu5FZl
   dxHCoReOBF38KIWYA66arAm_dQB38WmK3gD7oqyaKY68zSJJyaZIygaVPOi-NN2fbZXe
   ctW_gJ-GPUXFlE16t5qOo_rk_HdRgF89r75q9mwfyunS5DeTnJ4BTxk_V4f5rHK7dBXM
   FMQYP2igcdjxjQ",
         "p": "1v8oVkwy8OdYspm3pIP5GuPTJ2VXUY3BGJCQL78Rxd7oIiFw1QSyu625
   MUqGeh-6mqyVWPPXMHfbr-z7kshkX_Nl-8C7cUMKu6PVSkNwUhARG9lYhQiS_0V6tY0D
   KtP4EbDt0RfZMjhythPTRfxDG09KZORrDhkARKWVAr5mpuU",
         "q": "9CJWjX-gQRfmFht7XjBf9BJ3gJuU1i0H-NQ8bPAGFgP3GFVWrvU_lc40
   3IOzjeE3JNGSM2b8J6cgz9HU5fgj8GGxJ-yoR0vP-dEzpRnX9nePpxM8ayGJQxDCDTXe
   F5yVEJHwF1qbgGFlsT1EAvqJ2oEJeGCUUVWoYcRGZaWwDYk",
         "use": "sig"
       }
     ]
   }

A.4.  And now for the registration request

   Client Registration request

   {
     "application_type": "web",
     "response_types": [
       "code"
     ]
   }



Hedberg, et al.          Expires October 9, 2017               [Page 25]

                        OpenID Connect Federation             April 2017


   The Client Registration Request is sent to UNINETT who adds the two
   signed metadata staments it has.  One for each of SWAMID and
   Feide.Since it knows that it is the Foodle RP which is the subject of
   the JWT it adds Foodle's identifier as 'sub'

A.4.1.  Metadata statement about Foodle signed by UNINETT

   {
     "application_type": "web",
     "exp": 1491651299,
     "iat": 1491564899,
     "iss": "https://www.uninett.no",
     "kid": "dif1npSsQnZDxpF8v9v5kDF7wt9z4m8s3C7hulDn8H4",
     "metadata_statements": [
       "eyJhbGciOiJSUzI1NiIsImtpZCI6IlVGUF9JSE5EX25ELVp6U2N1blQtUW5DY29
   tTVoyZUZib0hIWk44X0Jac0kifQ.eyJzY29wZXMiOiBbIm9wZW5pZCIsICJlbWFpbCJd
   LCAicmVzcG9uc2VfdHlwZXMiOiBbImNvZGUiLCAidG9rZW4iXSwgImlhdCI6IDE0OTE1
   NjQ4OTksICJqdGkiOiAiNjRjM2I4M2UxOWU0NDc1NGI4NmNhMzdiNzNiNzJmMTUiLCAi
   ZmVkZXJhdGlvbl91c2FnZSI6ICJyZWdpc3RyYXRpb24iLCAidG9rZW5fZW5kcG9pbnRf
   YXV0aF9tZXRob2QiOiAicHJpdmF0ZV9rZXlfand0IiwgInNpZ25pbmdfa2V5cyI6IHsi
   a2V5cyI6IFt7ImUiOiAiQVFBQiIsICJrdHkiOiAiUlNBIiwgImtpZCI6ICJkaWYxbnBT
   c1FuWkR4cEY4djl2NWtERjd3dDl6NG04czNDN2h1bERuOEg0IiwgIm4iOiAiM2J6Snlh
   ZUhnenQtUFlLY1JjLWxaNmkwdjVIak1qbW1mZm10WmxtcDlLc0Q2blJHYUFyRU5qcjJo
   cDJycTJ4V1FPX2RIVHB4OVZLMU9haVNGZXlIYzdZeWtib2Mxd0NFOWt0RmRmb3pZX0cw
   LXdZTGNnWFBMdDlnTGI1OFpjUTBSV0Y2T3pneUtGcFYtbXJWS2pjVDltdWdlaEJqZFU4
   T0JKODMzWUV5Vk5Edlh5WE0xODZ0Z28yMDFwc1ZmOGxZaFEzb1MtM3hGZmllUm1fX2Na
   UXQ4X0FGb0RDdWVFYy1HMmVZOFZXTFBybmRhT0JTNHZvdmhOZjZkanI4clIwcFBJdUg0
   enl1NkdLUUV5VFhpU0J3STRWWUdIaFRHVU5aVGs4SW1wek5UajJqaEVSN25jQUd0aU9C
   WUxSaTRCclNFT0RRcXZITHZZNGV1MGtlMnpSbTFRIiwgInVzZSI6ICJzaWcifV19LCAi
   aXNzIjogImh0dHBzOi8vc3dhbWlkLnN1bmV0LnNlLyIsICJraWQiOiAiVUZQX0lITkRf
   bkQtWnpTY3VuVC1RbkNjb21NWjJlRmJvSEhaTjhfQlpzSSIsICJleHAiOiAxNDk0MTU2
   ODk5fQ.kMS0M7_m8UyRlOH-T_gBwK57jC69hPk328IVTZiD15cOHp7y8VAMVh1s0PKE3
   NgOBptRRcDjZ2Bis5iHjTFbPMSoBxJF-OJoxCCFSuL65b3kTr7LyRt9uRSU-el3IFIOs
   bTSNYBVTieDz_kfJ_YdZx2oQgrHGWKsDnvb3H3pP4MttTx7o6Yw2XXDeRa8vuEFHZ3xM
   CBA6AhDEPwuLeLQIXTOlHWXmHwvD_l-pIBSsYxv3RDUM8M6SLVZEHahAq7G4SJbTCEg_
   0XJN8qauk3JY4pxdM2heX9rS-b7jlQzXxu9sIQzVQCClLnQFlnBLn2Nsx6W7GK_nWZ6Q
   QHK39BgWg",
       "eyJhbGciOiJSUzI1NiIsImtpZCI6IlZYaXVZVXpleWpRRnpWTTIyc19reTAxb1Z
   YeUVrN0gteGducXR0UloxVGsifQ.eyJpZF90b2tlbl9zaWduaW5nX2FsZ192YWx1ZXNf
   c3VwcG9ydGVkIjogWyJSUzI1NiIsICJSUzUxMiJdLCAiaWF0IjogMTQ5MTU2NDg5OSwg
   ImNsYWltcyI6IFsic3ViIiwgIm5hbWUiLCAiZW1haWwiLCAicGljdHVyZSJdLCAianRp
   IjogIjFlMDNjZjg2ZGFkZDQyMjdiY2VjZjM2M2M0MmEzYjcxIiwgImZlZGVyYXRpb25f
   dXNhZ2UiOiAicmVnaXN0cmF0aW9uIiwgInNpZ25pbmdfa2V5cyI6IHsia2V5cyI6IFt7
   ImUiOiAiQVFBQiIsICJrdHkiOiAiUlNBIiwgImtpZCI6ICJkaWYxbnBTc1FuWkR4cEY4
   djl2NWtERjd3dDl6NG04czNDN2h1bERuOEg0IiwgIm4iOiAiM2J6SnlhZUhnenQtUFlL
   Y1JjLWxaNmkwdjVIak1qbW1mZm10WmxtcDlLc0Q2blJHYUFyRU5qcjJocDJycTJ4V1FP
   X2RIVHB4OVZLMU9haVNGZXlIYzdZeWtib2Mxd0NFOWt0RmRmb3pZX0cwLXdZTGNnWFBM
   dDlnTGI1OFpjUTBSV0Y2T3pneUtGcFYtbXJWS2pjVDltdWdlaEJqZFU4T0JKODMzWUV5



Hedberg, et al.          Expires October 9, 2017               [Page 26]

                        OpenID Connect Federation             April 2017


   Vk5Edlh5WE0xODZ0Z28yMDFwc1ZmOGxZaFEzb1MtM3hGZmllUm1fX2NaUXQ4X0FGb0RD
   dWVFYy1HMmVZOFZXTFBybmRhT0JTNHZvdmhOZjZkanI4clIwcFBJdUg0enl1NkdLUUV5
   VFhpU0J3STRWWUdIaFRHVU5aVGs4SW1wek5UajJqaEVSN25jQUd0aU9CWUxSaTRCclNF
   T0RRcXZITHZZNGV1MGtlMnpSbTFRIiwgInVzZSI6ICJzaWcifV19LCAiaXNzIjogImh0
   dHBzOi8vd3d3LmZlaWRlLm5vIiwgImtpZCI6ICJWWGl1WVV6ZXlqUUZ6Vk0yMnNfa3kw
   MW9WWHlFazdILXhnbnF0dFJaMVRrIiwgImV4cCI6IDE0OTQxNTY4OTl9.FRVYPUf1he_
   nJnj8zr63evL0EnKk6khzYgX1eDS-j-hh-ZZQpO800oIbayGNaa5YuNwyV8PP2I2lFyR
   8NXaI4aM1G-6TwicN7hl38TOMrjrgUKAM3fVjxUm0r6kgNUBiGrcqp_kmCA-Cpl53mM_
   hksIeZTQp4qizLILJi8nKyeeOFkkir0FmiI1lztqmDt3JrNHWjUv9N0oouiRVaFHsOIM
   -wRvcR13SYn7Y-QLTPkggi5DyuT5khUEJRGe3G7v7wqzEeVf41A8RaoquVKNr39YjYCh
   HfiMfF3LAXiiyCfWgjU0-6-81yj17WkcWVrv4kl8IkBoFxfTi7GEcfRq4uw"
     ],
     "response_types": [
       "code"
     ],
     "sub": "https://foodle.uninett.no"
   }

A.5.  Foodle client registration

   Now, when Foodle wants to register as a client with an OP it adds the
   signed Metadata statement it received from UNINETT to the client
   registration request.  Note that 'redirect_uri' MUST be in the
   registration request as this is requied by the OIDC standard.If the
   'redirect_uris' values that are transfered unprotected where to
   differ from what's in the signed metadata statement the OP MUST
   refuse the registration.

   Registration Request published by RP

   {
     "metadata_statements": [
       "eyJhbGciOiJSUzI1NiIsImtpZCI6ImRpZjFucFNzUW5aRHhwRjh2OXY1a0RGN3d
   0OXo0bThzM0M3aHVsRG44SDQifQ.eyJyZXNwb25zZV90eXBlcyI6IFsiY29kZSJdLCAi
   aWF0IjogMTQ5MTU2NDg5OSwgInN1YiI6ICJodHRwczovL2Zvb2RsZS51bmluZXR0Lm5v
   IiwgImlzcyI6ICJodHRwczovL3d3dy51bmluZXR0Lm5vIiwgImtpZCI6ICJkaWYxbnBT
   c1FuWkR4cEY4djl2NWtERjd3dDl6NG04czNDN2h1bERuOEg0IiwgImV4cCI6IDE0OTE2
   NTEyOTksICJtZXRhZGF0YV9zdGF0ZW1lbnRzIjogWyJleUpoYkdjaU9pSlNVekkxTmlJ
   c0ltdHBaQ0k2SWxWR1VGOUpTRTVFWDI1RUxWcDZVMk4xYmxRdFVXNURZMjl0VFZveVpV
   WmliMGhJV2s0NFgwSmFjMGtpZlEuZXlKelkyOXdaWE1pT2lCYkltOXdaVzVwWkNJc0lD
   SmxiV0ZwYkNKZExDQWljbVZ6Y0c5dWMyVmZkSGx3WlhNaU9pQmJJbU52WkdVaUxDQWlk
   RzlyWlc0aVhTd2dJbWxoZENJNklERTBPVEUxTmpRNE9Ua3NJQ0pxZEdraU9pQWlOalJq
   TTJJNE0yVXhPV1UwTkRjMU5HSTRObU5oTXpkaU56TmlOekptTVRVaUxDQWlabVZrWlhK
   aGRHbHZibDkxYzJGblpTSTZJQ0p5WldkcGMzUnlZWFJwYjI0aUxDQWlkRzlyWlc1ZlpX
   NWtjRzlwYm5SZllYVjBhRjl0WlhSb2IyUWlPaUFpY0hKcGRtRjBaVjlyWlhsZmFuZDBJ
   aXdnSW5OcFoyNXBibWRmYTJWNWN5STZJSHNpYTJWNWN5STZJRnQ3SW1VaU9pQWlRVkZC
   UWlJc0lDSnJkSGtpT2lBaVVsTkJJaXdnSW10cFpDSTZJQ0prYVdZeGJuQlRjMUZ1V2tS
   NGNFWTRkamwyTld0RVJqZDNkRGw2TkcwNGN6TkROMmgxYkVSdU9FZzBJaXdnSW00aU9p



Hedberg, et al.          Expires October 9, 2017               [Page 27]

                        OpenID Connect Federation             April 2017


   QWlNMko2U25saFpVaG5lblF0VUZsTFkxSmpMV3hhTm1rd2RqVklhazFxYlcxbVptMTBX
   bXh0Y0RsTGMwUTJibEpIWVVGeVJVNXFjakpvY0RKeWNUSjRWMUZQWDJSSVZIQjRPVlpM
   TVU5aGFWTkdaWGxJWXpkWmVXdGliMk14ZDBORk9XdDBSbVJtYjNwWlgwY3dMWGRaVEdO
   bldGQk1kRGxuVEdJMU9GcGpVVEJTVjBZMlQzcG5lVXRHY0ZZdGJYSldTMnBqVkRsdGRX
   ZGxhRUpxWkZVNFQwSktPRE16V1VWNVZrNUVkbGg1V0UweE9EWjBaMjh5TURGd2MxWm1P
   R3haYUZFemIxTXRNM2hHWm1sbFVtMWZYMk5hVVhRNFgwRkdiMFJEZFdWRll5MUhNbVZa
   T0ZaWFRGQnlibVJoVDBKVE5IWnZkbWhPWmpaa2FuSTRjbEl3Y0ZCSmRVZzBlbmwxTmtk
   TFVVVjVWRmhwVTBKM1NUUldXVWRJYUZSSFZVNWFWR3M0U1cxd2VrNVVhakpxYUVWU04y
   NWpRVWQwYVU5Q1dVeFNhVFJDY2xORlQwUlJjWFpJVEhaWk5HVjFNR3RsTW5wU2JURlJJ
   aXdnSW5WelpTSTZJQ0p6YVdjaWZWMTlMQ0FpYVhOeklqb2dJbWgwZEhCek9pOHZjM2Ro
   Yldsa0xuTjFibVYwTG5ObEx5SXNJQ0pyYVdRaU9pQWlWVVpRWDBsSVRrUmZia1F0V25w
   VFkzVnVWQzFSYmtOamIyMU5XakpsUm1KdlNFaGFUamhmUWxwelNTSXNJQ0psZUhBaU9p
   QXhORGswTVRVMk9EazVmUS5rTVMwTTdfbThVeVJsT0gtVF9nQndLNTdqQzY5aFBrMzI4
   SVZUWmlEMTVjT0hwN3k4VkFNVmgxczBQS0UzTmdPQnB0UlJjRGpaMkJpczVpSGpURmJQ
   TVNvQnhKRi1PSm94Q0NGU3VMNjViM2tUcjdMeVJ0OXVSU1UtZWwzSUZJT3NiVFNOWUJW
   VGllRHpfa2ZKX1lkWngyb1FnckhHV0tzRG52YjNIM3BQNE10dFR4N282WXcyWFhEZVJh
   OHZ1RUZIWjN4TUNCQTZBaERFUHd1TGVMUUlYVE9sSFdYbUh3dkRfbC1wSUJTc1l4djNS
   RFVNOE02U0xWWkVIYWhBcTdHNFNKYlRDRWdfMFhKTjhxYXVrM0pZNHB4ZE0yaGVYOXJT
   LWI3amxRelh4dTlzSVF6VlFDQ2xMblFGbG5CTG4yTnN4Nlc3R0tfbldaNlFRSEszOUJn
   V2ciLCAiZXlKaGJHY2lPaUpTVXpJMU5pSXNJbXRwWkNJNklsWllhWFZaVlhwbGVXcFJS
   bnBXVFRJeWMxOXJlVEF4YjFaWWVVVnJOMGd0ZUdkdWNYUjBVbG94VkdzaWZRLmV5SnBa
   RjkwYjJ0bGJsOXphV2R1YVc1blgyRnNaMTkyWVd4MVpYTmZjM1Z3Y0c5eWRHVmtJam9n
   V3lKU1V6STFOaUlzSUNKU1V6VXhNaUpkTENBaWFXRjBJam9nTVRRNU1UVTJORGc1T1N3
   Z0ltTnNZV2x0Y3lJNklGc2ljM1ZpSWl3Z0ltNWhiV1VpTENBaVpXMWhhV3dpTENBaWNH
   bGpkSFZ5WlNKZExDQWlhblJwSWpvZ0lqRmxNRE5qWmpnMlpHRmtaRFF5TWpkaVkyVmpa
   ak0yTTJNME1tRXpZamN4SWl3Z0ltWmxaR1Z5WVhScGIyNWZkWE5oWjJVaU9pQWljbVZu
   YVhOMGNtRjBhVzl1SWl3Z0luTnBaMjVwYm1kZmEyVjVjeUk2SUhzaWEyVjVjeUk2SUZ0
   N0ltVWlPaUFpUVZGQlFpSXNJQ0pyZEhraU9pQWlVbE5CSWl3Z0ltdHBaQ0k2SUNKa2FX
   WXhibkJUYzFGdVdrUjRjRVk0ZGpsMk5XdEVSamQzZERsNk5HMDRjek5ETjJoMWJFUnVP
   RWcwSWl3Z0ltNGlPaUFpTTJKNlNubGhaVWhuZW5RdFVGbExZMUpqTFd4YU5ta3dkalZJ
   YWsxcWJXMW1abTEwV214dGNEbExjMFEyYmxKSFlVRnlSVTVxY2pKb2NESnljVEo0VjFG
   UFgyUklWSEI0T1ZaTE1VOWhhVk5HWlhsSVl6ZFplV3RpYjJNeGQwTkZPV3QwUm1SbWIz
   cFpYMGN3TFhkWlRHTm5XRkJNZERsblRHSTFPRnBqVVRCU1YwWTJUM3BuZVV0R2NGWXRi
   WEpXUzJwalZEbHRkV2RsYUVKcVpGVTRUMEpLT0RNeldVVjVWazVFZGxoNVdFMHhPRFow
   WjI4eU1ERndjMVptT0d4WmFGRXpiMU10TTNoR1ptbGxVbTFmWDJOYVVYUTRYMEZHYjBS
   RGRXVkZZeTFITW1WWk9GWlhURkJ5Ym1SaFQwSlROSFp2ZG1oT1pqWmthbkk0Y2xJd2NG
   QkpkVWcwZW5sMU5rZExVVVY1VkZocFUwSjNTVFJXV1VkSWFGUkhWVTVhVkdzNFNXMXdl
   azVVYWpKcWFFVlNOMjVqUVVkMGFVOUNXVXhTYVRSQ2NsTkZUMFJSY1haSVRIWlpOR1Yx
   TUd0bE1ucFNiVEZSSWl3Z0luVnpaU0k2SUNKemFXY2lmVjE5TENBaWFYTnpJam9nSW1o
   MGRIQnpPaTh2ZDNkM0xtWmxhV1JsTG01dklpd2dJbXRwWkNJNklDSldXR2wxV1ZWNlpY
   bHFVVVo2VmsweU1uTmZhM2t3TVc5V1dIbEZhemRJTFhobmJuRjBkRkphTVZScklpd2dJ
   bVY0Y0NJNklERTBPVFF4TlRZNE9UbDkuRlJWWVBVZjFoZV9uSm5qOHpyNjNldkwwRW5L
   azZraHpZZ1gxZURTLWotaGgtWlpRcE84MDBvSWJheUdOYWE1WXVOd3lWOFBQMkkybEZ5
   UjhOWGFJNGFNMUctNlR3aWNON2hsMzhUT01yanJnVUtBTTNmVmp4VW0wcjZrZ05VQmlH
   cmNxcF9rbUNBLUNwbDUzbU1faGtzSWVaVFFwNHFpekxJTEppOG5LeWVlT0Zra2lyMEZt
   aUkxbHp0cW1EdDNKck5IV2pVdjlOMG9vdWlSVmFGSHNPSU0td1J2Y1IxM1NZbjdZLVFM
   VFBrZ2dpNUR5dVQ1a2hVRUpSR2UzRzd2N3dxekVlVmY0MUE4UmFvcXVWS05yMzlZallD
   aEhmaU1mRjNMQVhpaXlDZldnalUwLTYtODF5ajE3V2tjV1ZydjRrbDhJa0JvRnhmVGk3



Hedberg, et al.          Expires October 9, 2017               [Page 28]

                        OpenID Connect Federation             April 2017


   R0VjZlJxNHV3Il0sICJhcHBsaWNhdGlvbl90eXBlIjogIndlYiJ9.0Em2-rmer1fEkd5
   GGUBaXVu32rNmW4HHOFWjGwxO7mGQsuIdmMBlp48nlExHDuGGUSmFbw7jjzoN__h3yEi
   vKxM3Q6pdq6gqkB-m_uCR_mShViyZ07sgi_7yZ0FMl6WNwhboXXG3cAaucl2fWRORMaX
   hDVUsYarBYdurLPb6OvC6z49noRckSjORtkMvGW7sqM4KYLf7-wD0QkndSdCi_t6FdlM
   xjX35jtENR5RbHjxLhq9jbBxZ49LuiplJZqCoWBo0QcJlB0o6xte1Qf9ccGHKnIKJqlJ
   csLXC7v0mCb88QdGx9lGbakBWGIMpMgjajaZnbdRl4puHga0LfTXt0Q"
     ],
     "redirect_uris": [
       "https://foodle.uninett.no/callback"
     ]
   }

A.6.  Unpacking the client registration request

   An OP that has the public part of the signing keys for both the
   SWAMID and Feide federations can now verify the signature chains all
   the way from the Metadata statement signed by UNINETT up to the FOs.
   If that works it can then flatten the compounded metadata statements.

A.7.  Unpacked and flattened metadata statement per FO

A.7.1.  *** https://swamid.sunet.se/ ***

   {
     "application_type": "web",
     "federation_usage": "registration",
     "redirect_uris": [
       "https://foodle.uninett.no/callback"
     ],
     "response_types": [
       "code",
       "token"
     ],
     "scopes": [
       "openid",
       "email"
     ],
     "token_endpoint_auth_method": "private_key_jwt"
   }

A.7.2.  *** https://www.feide.no ***










Hedberg, et al.          Expires October 9, 2017               [Page 29]

                        OpenID Connect Federation             April 2017


   {
     "application_type": "web",
     "claims": [
       "sub",
       "name",
       "email",
       "picture"
     ],
     "federation_usage": "registration",
     "id_token_signing_alg_values_supported": [
       "RS256",
       "RS512"
     ],
     "redirect_uris": [
       "https://foodle.uninett.no/callback"
     ],
     "response_types": [
       "code"
     ]
   }

Authors' Addresses

   Roland Hedberg (editor)
   independent

   Email: roland@catalogix.se


   Samuel Gulliksson
   Schibsted Media Group

   Email: samuel.gulliksson@gmail.com


   Michael B. Jones
   Microsoft

   Email: mbj@microsoft.com
   URI:   http://self-issued.info/


   John Bradley
   Ping Identity

   Email: ve7jtb@ve7jtb.com
   URI:   http://www.thread-safe.com/




Hedberg, et al.          Expires October 9, 2017               [Page 30]
