



                                                         R. Hedberg, Ed.
                                                             independent
                                                           S. Gulliksson
                                                               Schibsted
                                                                M. Jones
                                                               Microsoft
                                                              J. Bradley
                                                           Ping Identity
                                                          March 25, 2017


                OpenID Connect Federation 1.0 - draft 02
                     openid-connect-federation-1_0

Abstract

   The OpenID Connect standard specifies how a Relying Party (RP) can
   discover metadata about an OpenID Provider (OP), and then register to
   obtain client credentials.  During discovery and registration there
   is no automated mechanism for the OP or the RP to verify the
   information exchanged during this process.  All the information is
   self-asserted.

   In an identity federation context this is not sufficient.  The
   participants of the federation must be able to trust information
   provided about other participants in the federation.

   This document describes how an identity federation can be built
   around a trusted third party, the federation operator.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2
   2.  Requirements Language . . . . . . . . . . . . . . . . . . . .   3
   3.  Metadata Statement  . . . . . . . . . . . . . . . . . . . . .   3
     3.1.  Metadata Common to All Entities . . . . . . . . . . . . .   3
     3.2.  Specific Client Metadata  . . . . . . . . . . . . . . . .   5
     3.3.  Specific Provider Metadata  . . . . . . . . . . . . . . .   5
     3.4.  Compounded Metadata Statement . . . . . . . . . . . . . .   5
       3.4.1.  Basic components  . . . . . . . . . . . . . . . . . .   5
       3.4.2.  Relationship between Metadata Statements  . . . . . .   6
       3.4.3.  Constructing Entity Metadata  . . . . . . . . . . . .   6
     3.5.  Conceptual Model  . . . . . . . . . . . . . . . . . . . .   8
     3.6.  Usage . . . . . . . . . . . . . . . . . . . . . . . . . .   8
   4.  Trust Model . . . . . . . . . . . . . . . . . . . . . . . . .   9
     4.1.  Federation Operator . . . . . . . . . . . . . . . . . . .   9
     4.2.  The Building Block  . . . . . . . . . . . . . . . . . . .   9
     4.3.  Constructing a Signed Metadata Statement  . . . . . . . .  10



Hedberg, et al.        Expires September 26, 2017               [Page 1]

                        OpenID Connect Federation             March 2017


     4.4.  Verifying the Metadata Statement  . . . . . . . . . . . .  11
     4.5.  Flattening the compounded metadata statement  . . . . . .  12
   5.  OpenID Connect Communication  . . . . . . . . . . . . . . . .  12
     5.1.  Provider Discovery  . . . . . . . . . . . . . . . . . . .  12
     5.2.  Client Registration . . . . . . . . . . . . . . . . . . .  12
     5.3.  Client Registration response  . . . . . . . . . . . . . .  13
   6.  Belonging to Several Federations  . . . . . . . . . . . . . .  13
     6.1.  Choosing federation . . . . . . . . . . . . . . . . . . .  13
     6.2.  Relying Party . . . . . . . . . . . . . . . . . . . . . .  13
     6.3.  OpenID Provider . . . . . . . . . . . . . . . . . . . . .  14
   7.  Timeouts  . . . . . . . . . . . . . . . . . . . . . . . . . .  15
   8.  Acknowledgements  . . . . . . . . . . . . . . . . . . . . . .  15
   9.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .  16
   10. Security Considerations . . . . . . . . . . . . . . . . . . .  16
   11. Normative References  . . . . . . . . . . . . . . . . . . . .  16
   Appendix A.  Example  . . . . . . . . . . . . . . . . . . . . . .  17
     A.1.  Relying Party joining a federation  . . . . . . . . . . .  18
       A.1.1.  Step 1 - FMR creates its signing key pair.  . . . . .  18
       A.1.2.  Step 2 - The FMR submits registration data to FO  . .  19
       A.1.3.  Step 3 - FO returns a signed metadata statement . . .  20
       A.1.4.  Step 4 - The RP gets a signing key  . . . . . . . . .  21
       A.1.5.  Step 5 - RP produces a client registration request  .  22
       A.1.6.  Step 6 - Developer produces metadata statement for RP  23
       A.1.7.  Step 7 - RP sends a client registration request to an
               OP  . . . . . . . . . . . . . . . . . . . . . . . . .  24
       A.1.8.  Step 8 - OP handles metadata statement  . . . . . . .  25
   Appendix B.  Notices  . . . . . . . . . . . . . . . . . . . . . .  25
   Appendix C.  Document History . . . . . . . . . . . . . . . . . .  26
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  26

1.  Introduction

   The OpenID Connect specification defines how a Relying Party and an
   OpenID Connect Provider can exchange information dynamically about
   each other.  This information is necessary for future successful OIDC
   communication.

   One problem with using dynamic discovery and registration is that the
   correctness of the information that is exchanged can not be easily
   verified by the recipient as it is self-asserted.

   Another problem that has been raised is the dependency on TLS as the
   sole protection against attacks on the transferred information.
   These last couple of years a number of problems with openSSL, which
   is probably the most widely used TLS library, has been discovered
   that puts reasonable doubt into this dependency.





Hedberg, et al.        Expires September 26, 2017               [Page 2]

                        OpenID Connect Federation             March 2017


   We are extending Signed Metadata, as introduced by OAuth 2.0
   Authorization Server Metadata [I-D.draft-ietf-oauth-discovery], to
   create what we call metadata statements.  Metadata statements
   together with the use of a trusted third party (that verifies and
   enforces some common policy), can be used to transfer verified data
   and trust in the data between clients and servers.

2.  Requirements Language

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described inRFC 2119 [RFC2119].

3.  Metadata Statement

   A metadata statement asserts metadata values about an entity (client
   or server).

3.1.  Metadata Common to All Entities

   These extra metadata parameters appear in both provider and client
   metadata statements:

   signing_keys
      OPTIONAL.  A JSON Web Key Set (JWKS) [RFC7517] representing the
      public part of the entity's signing keys.

      The keys that can be found here or at "signing_keys_uri" must not
      be confused with the keys that an OIDC entity are using for
      Authorization/AccessToken/RefreshToken/UserInfo requests and
      responses those keys are found at "jwks_uri" or in the case of
      client registration also possibly at "jwks".  The signing keys are
      used to sign metadata statements, keys found at "signed_jwks_uri"
      and can also be used by an OP to sign a client registration
      request response.

   signing_keys_uri
      OPTIONAL.  Location where a JWKS representing the public part of
      the entity's signing keys can be found.  SHOULD return the
      Content-Type "application/jose" to indicate that the JWKS is in
      the form of a JSON Web Signature (JWS) [RFC7515] using the JWS
      Compact Serialization.

   metadata_statements
      OPTIONAL.  JSON array containing a list of metadata statements.

   metadata_statement_uris




Hedberg, et al.        Expires September 26, 2017               [Page 3]

                        OpenID Connect Federation             March 2017


      OPTIONAL.  JSON object where the names are the federation
      identifiers and the values are URLs pointing to metadata
      statements connected to each federation.

   signed_jwks_uri
      OPTIONAL.  This is the signed version of the "jwks_uri" parameter
      defined in OpenID Connect Dynamic Client Registration 1.0
      [OpenID.Registration].  SHOULD return the Content-Type
      "application/jose" to indicate that the JWKS is in the form of a
      JWS using the JWS Compact Serialization.  The key used to sign the
      JWKS can be found in "signing_keys" or "signing_keys_uri"

   federation_usage
      OPTIONAL.  A metadata statement can be used in several different
      context.  This parameter can be used to limit the usage to a
      specific context.  The values specified in this document are
      'discovery', 'registration' and 'response'.  The corresponding
      contexts are:

      discovery
         Provider Information Discovery Response [OpenID.Discovery]

      registration
         Client Registration Request [OpenID.Registration]

      response
         Client Registration Request response [OpenID.Registration]

   Metadata statements and signing keys can be transferred in two
   different ways: either by including the information in the statement,
   or by providing a URI that points to the information.  How metadata
   statements and signing keys are transferred is independent of each
   other.  It is NOT allowed to divide the information (metadata
   statements or signing keys) into two pieces and send one in the
   statement and leave the rest to be fetched using the URI.

   Along the same line if both "jwks_uri" and "signed_jwks_uri" are
   present, which they might be for backward compatibility reasons, then
   "signed_jwks_uri" SHOULD be preferred.

   Metadata statements that do not contain "metadata_statements" or
   "metadata_statement_uris" are called level 0 metadata statements.

   An OP MUST sign it's JWKs and therefore publish a signed_jwks_uri.
   Unless an RP is not able to handle secrets is MUST also sign it's
   JWKS and publish a signed_jwks_uri.





Hedberg, et al.        Expires September 26, 2017               [Page 4]

                        OpenID Connect Federation             March 2017


3.2.  Specific Client Metadata

   All parameters defined in section 2 of OpenID Connect Dynamic Client
   Registration 1.0 [OpenID.Registration] are allowed in a metadata
   statement.

   To that list is added:

   scopes
      RECOMMENDED.  JSON array containing a list of the RFC6749
      [RFC6749] scope values that this clients expects to use.

   claims
      RECOMMENDED.  JSON array containing a list of the Claim Names of
      the Claims that the OpenID Client wants values for.

3.3.  Specific Provider Metadata

   All parameters defined in section 3 of OpenID Connect Discovery 1.0
   [OpenID.Discovery]

3.4.  Compounded Metadata Statement

3.4.1.  Basic components

   To describe Compounded Metadata Statements we need a way of
   describing the different components in such a statement.  These are
   the basic components:

   ms_X
      Metadata Statement signing request by X without signing keys and
      signed metadata statements.

   SK[X]
      Signing keys that belongs to X

   X(MS)
      Metadata Statement signed by X

   Using these basic components we can now describe a simple signed
   Metadata Statement as:

   A(ms_B + SK[B])

   B being the entity that requested a signature by A of B's metadata
   statement and signing keys.

   A more complicated compounded metadata statement would then be:



Hedberg, et al.        Expires September 26, 2017               [Page 5]

                        OpenID Connect Federation             March 2017


   B(ms_C + SK[C) + A(ms_B + SK[B])

   Here we have three entities involved: A which is the top level entity
   (the federation operator) a second level entity (B) representing the
   federation member and C which could be an entity within the
   federation like an OP or an RP owned/controlled by B.  If we assume
   that C is an RP then ms_C would typically be a client registration
   request and SK[C] would be the signing keys that the RP used to sign
   the JWKS placed at signed_jwks_uri.  The statement signed by A (ms_b
   + SK[B]) would contain metadata common to all RPs owned by the member
   (ms_b) and the signing key (SK[B]) that the member uses to sign
   requests from the member's RPs.

   Note that the level N requester is the level N+1 signer.

3.4.2.  Relationship between Metadata Statements

   The metadata for each entity in the federation is described by one or
   more metadata statements (for example, ms_0, ms_1, ..., ms_n).  ms_0
   (the level 0 metadata statement mentioned above) would be the most
   generic, and ms_1, ...,ms_n would in turn be successively more
   specific.  ms_0 would typically contain information that belongs to
   the organization, for instance "tos_uri", "contacts" and the like,
   while ms_n would contain information that belongs to one specific
   entity like "authorization_endpoint" for an OP or "redirect_uris" for
   a RP.

3.4.3.  Constructing Entity Metadata

   The metadata for a specific entity is constructed by starting with
   the information in ms_0 and then adding the information in ms_1 to
   ms_n using the following rule:

   *Given two metadata statements ms_i and ms_j (j > i, i=0,..,n-1,
   j=1,..,n) For every claim in ms_j: If the claim does not appear in
   ms_i add it to ms_i.  If the claim appears in ms_i then replace the
   value of the claim in ms_i with the value of the claim in ms_j if and
   only if the value in ms_j is less or equal to the value in ms_i.  *

   Less or equal is defined as:

   String
      less or equal if they are the same.

   Lists
      For each value in ms_j there MUST be a corresponding value in ms_i
      that is less or equal.




Hedberg, et al.        Expires September 26, 2017               [Page 6]

                        OpenID Connect Federation             March 2017


   Booleans
      less or equal if they are the same.

   Integer/Floats
      Numeric comparision is used.

   Associative array/dictionary
      ms_j is less or equal to ms_i if each key in ms_j exists in ms_i
      and ms_j[x] is less or equal to ms_i[x].

   The following is a non-normative example of a set of client-specific
   metadata statements who together form the metadata for an entity:

   ms_0

   {
     "contacts": ["helpdesk@example.com"],
     "logo_uri": "https://example.com/logo.jpg",
     "policy_uri": "https://example.com/policy.html",
     "tos_uri": "https://example.com/tos.html"
   }

   ms_1

   {
     "scope": "openid eduperson",
     "response_types": ["code", "code id_token"],
   }

   ms_2

   {
     "contacts": ["rp_helpdesk@example.com"],
     "redirect_uris": ["https://example.com/rp1"],
     "response_types: ["code"]
   }

   The metadata for the entity in question, using the rules above, would
   then be:












Hedberg, et al.        Expires September 26, 2017               [Page 7]

                        OpenID Connect Federation             March 2017


   sum(ms_0...2)

   {
     "contacts": ["helpdesk@example.com"],
     "logo_uri": "https://example.com/logo.jpg",
     "policy_uri": "https://example.com/policy.html",
     "tos_uri": "https://example.com/tos.html"
     "scope": "openid eduperson",
     "response_types": ["code"],
     "redirect_uris": ["https://example.com/rp1"],
   }

3.5.  Conceptual Model

   A set of metadata statements that, like the ones above, together
   describe an entity are brought together using the
   "metadata_statement" parameter.

   The following is a non-normative example of a compounded metadata
   statement.  Also note that the the metadata_statement MUST be a
   signed JWT.  In this example, the only the parts of the signed JWT
   payload pertinent to the example are shown.

   {
     "contacts": ["rp_helpdesk@example.com"],
     "redirect_uris": ["https://example.com/rp1"],
     "response_types: ["code"]
     "metadata_statements": [
       {
         "scope": "openid eduperson",
         "response_types": ["code", "code id_token"],
         "metadata_statements" : [
           {
             "contacts": ["helpdesk@example.com"],
             "logo_uri": "https://example.com/logo.jpg",
             "policy_uri": "https://example.com/policy.html",
             "tos_uri": "https://example.com/tos.html"
           }
         ]
       }
     ]
   }

3.6.  Usage

   Metadata statements that are used in different contexts will contain
   different parameters.  For example, information that an OP publishes
   about itself is not the same as what an RP wants to register.  This



Hedberg, et al.        Expires September 26, 2017               [Page 8]

                        OpenID Connect Federation             March 2017


   together with the differences in the roles between an OP and an RP,
   means that policies for RPs will not be the same as for OPs.  There
   is therefor a need for tagging the Metadata statement such that a
   Metadata statement intended to be used in one context can not be used
   in another.  This is the reason for the federation_usage parameter.

4.  Trust Model

   The trust model is based on linking together signing keys,
   represented as JWK Sets [RFC7517].  Each signature chain is rooted in
   the trusted third party's signing keys.  By verifying such signature
   chains, the entities can establish trust in the metadata.

4.1.  Federation Operator

   The Federation Operator (FO) is the trusted third party.  The FO MUST
   have a globally unique identifier.  It will publish a JWKS,
   containing the signing keys that the FO will use for signing metadata
   submitted to it, at a HTTPS URL which server certificate MUST appear
   in a well-known Certificate Transparency log [RFC6962].  The key IDs
   of the FO's signing keys MUST be globally unique.

   For the following description, this is assumed to be true: A
   federation consists of a number of members, and each member has one
   or more representatives registered with the federation.  These
   representatives are allowed to issue metadata signing requests on
   behalf of the member to the federation.  Below such a representative
   is called a Level 0 Requester (L0Req).  Within each member unless all
   entities belonging to the member is handled directly by the L0Req
   there may exists parties that are responsible for single or groups of
   entities.  Within these parties we may have further subdivisions such
   that we end up with Level 0, 1, 2, 3 or more requesters.  This
   document makes no assumption on the number of levels.

4.2.  The Building Block

   Even though we talk about a chain of trust model, the actual
   representation is as we have seen above a compounded metadata
   statement.

   The innermost metadata statement in the nest of metadata statements
   is the one that the FO has signed.  That statement MUST NOT contain
   any references to other metadata statements.  See simple signed
   metadata (Section 3.4.1, Paragraph 2) above.  All other metadata
   statements in the nest MUST contain at least one reference to another
   metadata statement.  An example of this is can be seen here
   (Section 3.4.1, Paragraph 3).




Hedberg, et al.        Expires September 26, 2017               [Page 9]

                        OpenID Connect Federation             March 2017


4.3.  Constructing a Signed Metadata Statement

   These are the steps that is preformed to construct a signed metadata
   statement.  A metadata signing request may be about one specific
   entity or a group of similar entities.

   1.  The "requester" constructs a signing request by collecting the
       necessary client or provider metadata as describe in Section 3.

   2.  If this is about the top most metadata statement (ms_0) then no
       metadata statement will be added to the metadata statement.  If
       it is a more specific metadata statement (ms_1...n) then more
       general metadata statement/-s MUST be added.  Dependent on setup
       the metadata statement can be added by the requester or the
       signer.

   3.  The metadata statement is transported to the signing party.  In
       the case or ms_0 this MUST be the FO.  If it is ms_1 it is the
       "LOReq".  If it is ms_2 it is the L1Req and so on.

   4.  The signing party verifies the information in the metadata
       statement, modifies and/or adds more information according to the
       policy before signing the statement.

   5.  Once signed by the signer the signed metadata is sent back to the
       "requester".

   An example of the construction of a compounded metadata statement.
   The Level 0 Requester (L0Req) sends a metadata statement request to
   the federation operator (FO).

   L0Req -- (ms_L0Req + SK[L0Req]) --> FO

   The FO verifies the information and if the federations policy so
   demands may add extra information.  After signing with the FOs
   signing key the signed metadata statement is returned to the L0Req.

   L0Req <-- FO(ms_L0Req + SK[L0Req]) --- FO

   Next step that happens some time later is that the L1Req sends a
   Metadata Statement signing requests to the L0Reg.

   L1Req -- (ms_L1Req + SK[L1Req]) --> L0Req

   The L0Req verifies the information in the request and adds the signed
   L0Req metadata.  The L0Req may also add other information to the
   Metadata Statement before it signs and returns it to the L1Req.




Hedberg, et al.        Expires September 26, 2017              [Page 10]

                        OpenID Connect Federation             March 2017


   L1Req <- L0Req(ms_L1Req + SK[L1Req] + FO(ms_L0Req+SK[L0Req])) - L0Req

   This was an example using 3 levels.  As said before this document
   makes no assumption as to how many levels should be used.

4.4.  Verifying the Metadata Statement

   Verifying a metadata statement you first grab the innermost signed
   metadata statement.  If this is signed by a FO you have the public
   part of the signing keys from then you can verify the signature of
   the metadata statement.  If the verification concludes that the
   signature was correct you can now take the signing keys that was
   included in the signed document and use those to verify the second
   innermost signed metadata statement.  And so on.

   Verifying the received metadata statement involves running a function
   similar to this:

   def verify(ms, sign_keys):
       keys = []
       pl = get_payload(ms)
       if 'metadata_statements' in pl:
           msl = []
           for statement in pl['metadata_statements']:
               _ms = verify(statement, sign_keys)
               if _ms:
                   keys.append(get_keys(_ms))
                   msl.append(_ms)
           pl['metadata_statements'] = msl
       elif 'metadata_statement_uris' in pl:
           msl = []
           for _iss, uri in pl['metadata_statement_uris'].items():
               statement = html_get(uri)
               _ms = verify(statement, sign_keys)
               if _ms:
                   keys.append(get_keys(_ms))
                   msl.append(_ms)
           pl['metadata_statements'] = msl
       else:
           return verify_signature(ms, pl['iss'], sign_keys):

       if verify_signature(ms, pl['iss'], keys):
           return pl

   where the function get_payload unpacks the payload from the JWS
   without verify the signature.  The function verify_signature, on the
   other hand, does verify the signature of the JWS and if everything is
   correct returns the JWS payload.



Hedberg, et al.        Expires September 26, 2017              [Page 11]

                        OpenID Connect Federation             March 2017


4.5.  Flattening the compounded metadata statement

   Once you have a verified compounded metadata statement you have to
   flatten it to get a useful metadata statement.  To do this you use
   the method outlined in Section 3.4.3

5.  OpenID Connect Communication

   The trust between the entities is established using the above
   described extensions in the first two steps of the communication
   between an RP and an OP.  How the RP found the OP in the first place
   is out of scope for this document.

   ------                             ------
   |    | <--- 1) Discovery --------> |    |
   | RP | <--- 2) Registration -----> | OP |
   |    |                             |    |
   ------                             ------


   After the discovery and registration is completed a first time, those
   steps SHOULD only be repeated if any changes occur (see notes in
   respective sections below).

5.1.  Provider Discovery

   The OP MUST publish its provider metadata as specified by OpenID
   Connect Discovery 1.0 [OpenID.Discovery].  The RP makes a standard
   OpenID Provider Configuration Request.  The OP responds with its
   provider configuration and the additional metadata parameters
   specified above.

   The OP SHOULD have the complete response signed by it's superior in
   the signing chain and MAY have them signed in advance.

5.2.  Client Registration

   The OP MUST support dynamic client registration as described in
   OpenID Connect Dynamic Client Registration 1.0 [OpenID.Registration].
   The RP makes a Client Registration Request including the additional
   metadata specified above.

   The RP SHOULD have the complete request signed by it's superior in
   the signing chain and MAY have it signed in advance.







Hedberg, et al.        Expires September 26, 2017              [Page 12]

                        OpenID Connect Federation             March 2017


5.3.  Client Registration response

   It is unlikely that an OP can prepare a number of signed Metadata
   statements representing client registration responses in advance.
   Still if the OP wants to have the whole response signed it has two
   choices.  Either the superior signer has a service that can sign
   statements on-the-fly or the OP signs it itself.  If the later the OP
   needs to have a blank (only containing signing_keys) metadata
   statement signed by the superior.  Once it has that it can sign the
   response plus the signed metadata statement and construct a
   compounded metadata statement that can be verified using the method
   described inSection 4.4.

6.  Belonging to Several Federations

6.1.  Choosing federation

   This draft allows any entity to belong to more then one federation.
   During the provider discovery and client registration process the
   parties has to agree on which federation to use.  Ultimately the OP
   decides.

      The client asks for the provider information

      The OP, using some rule, may publish one or a several
      "metadata_statements".  If it publishes more than one
      "metadata_statements", then they should be rooted in different
      federations.

      Based on what the OP published, the RP publishes a number of
      "metadata_statements", all rooted in federations that the OP
      belongs to.

      If the RP published more then one "metadata_statements", then the
      OP should/must choose one and make that known in the client
      registration response.  One way of doing this is described in
      Section 5.3

6.2.  Relying Party

   An organization may be a member of more the one federation.  The RPs
   it is responsible for may be members of one or more of these.

   This is then how to deal with this.  The organization registers and
   gets metadata signed by each federation.  One extreme is that it will
   mint a new key pair for each federation, the other is that it will
   use the same key pair for all federations.  It does not matter which
   it chooses, but the end result MUST be that there is one signed RP



Hedberg, et al.        Expires September 26, 2017              [Page 13]

                        OpenID Connect Federation             March 2017


   registration request per signing key.  This is then published using
   "metadata_statement_uris" or "metadata_statements".

   The following is a non-normative example of an absolutely minimal
   client registration request sent to an OP:

   {
     "redirect_uris": ["https://example.com/rp2/callback"],
     "metadata_statement_uris": {
         https://swamid.sunet.se/":
           "https://dev.example.com/rp1/idfed/swamid.jws",
         "https://www.incommon.org":
           "https://dev.example.com/rp1/idfed/incommon.jws"
     }
   }

   As described above, when the OP receives a request like this it will
   chose which federation it will work within and then signal that by
   only returning that corresponding information in the
   "metadata_statements" / "metadata_statement_uris" in the registration
   response.

   The following is a non-normative example of an OPs response on the
   client registration request above:

   {
     "client_id": "abcdefgh",
     "client_secret": "0123456789",
     "client_id_issued_at": 1462375583,
     "client_secret_expires_at": 1462379183,
     "redirect_uris": ["https://example.com/rp2/callback"],
     "metadata_statement_uris": {
       "https://swamid.sunet.se/":
         "https://dev.example.com/rp1/idfed/swamid.jws",
     }
   }

6.3.  OpenID Provider

   An OP has the choice of whether it wants one key pair per federation,
   one key pair for everyone, or anything in between.  And, like the RP
   owner, it has to produce one signed metadata statement per key used.









Hedberg, et al.        Expires September 26, 2017              [Page 14]

                        OpenID Connect Federation             March 2017


   The following is a non-normative example of an OPs response to a
   provider configuration request:

     {
       "issuer": "https://foo.example.org/op/fDTowvP0slEdEAcc",
       "response_types_supported": ["code", "code id_token", "token"],
       "grant_types_supported": ["authorization_code", "implicit",
           "urn:ietf:params:oauth:grant-type:jwt-bearer"],
       "subject_types_supported": ["pairwise", "public"],
       "id_token_signing_alg_values_supported": ["RS256"],
       "metadata_statement_uris": {
         "https://swamid.sunet.se/":
           "https://foo.example.org/op/idfed/swamid.jws",
         "https://www.incommon.org":
           "https://foo.example.org/op/idfed/incommon.jws"
         "https://www.switch.ch":
           "https://foo.example.org/op/idfed/switch.jws"
         "https://www.aco.net/":
           "https://foo.example.org/op/idfed/aconet.jws"
     }

7.  Timeouts

   There are a number of timeouts that MUST considered

      Each signature has a timeout.

      A client registration has a timeout.

   Taking this into consideration, an OP MUST NOT assign a lifetime to a
   client registration that exceeds the lifetime of the metadata
   statement signatures.

8.  Acknowledgements

      Heather Flanagan

      Andreas Akre Solberg

      The JRA3T3 task force of GEANT4-2

      Michael Schwartz

      Peter Schober







Hedberg, et al.        Expires September 26, 2017              [Page 15]

                        OpenID Connect Federation             March 2017


9.  IANA Considerations

   TBD

10.  Security Considerations

   TBD

11.  Normative References

   [I-D.draft-ietf-oauth-discovery]
              Sakimura, N., Bradley, J., and M. Jones, "OAuth 2.0
              Authorization Server Metadata", August 2016,
              <https://tools.ietf.org/html/draft-ietf-oauth-discovery-
              04>.

   [OpenID.Core]
              Sakimura, N., Bradley, J., Jones, M., de Medeiros, B., and
              C. Mortimore, "OpenID Connect Discovery 1.0", August 2015,
              <http://openid.net/specs/openid-connect-core-1_0.html>.

   [OpenID.Discovery]
              Sakimura, N., Bradley, J., Jones, M., and E. Jay, "OpenID
              Connect Discovery 1.0", August 2015,
              <http://openid.net/specs/
              openid-connect-discovery-1_0.html>.

   [OpenID.Registration]
              Sakimura, N., Bradley, J., and M. Jones, "OpenID Connect
              Dynamic Client Registration 1.0", August 2015,
              <http://openid.net/specs/
              openid-connect-registration-1_0.html>.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <http://www.rfc-editor.org/info/rfc2119>.

   [RFC6749]  Hardt, D., Ed., "The OAuth 2.0 Authorization Framework",
              RFC 6749, DOI 10.17487/RFC6749, October 2012,
              <http://www.rfc-editor.org/info/rfc6749>.

   [RFC6962]  Laurie, B., Langley, A., and E. Kasper, "Certificate
              Transparency", RFC 6962, DOI 10.17487/RFC6962, June 2013,
              <http://www.rfc-editor.org/info/rfc6962>.






Hedberg, et al.        Expires September 26, 2017              [Page 16]

                        OpenID Connect Federation             March 2017


   [RFC7515]  Jones, M., Bradley, J., and N. Sakimura, "JSON Web
              Signature (JWS)", RFC 7515, DOI 10.17487/RFC7515, May
              2015, <http://www.rfc-editor.org/info/rfc7515>.

   [RFC7517]  Jones, M., "JSON Web Key (JWK)", RFC 7517,
              DOI 10.17487/RFC7517, May 2015,
              <http://www.rfc-editor.org/info/rfc7517>.

   [RFC7591]  Richer, J., Ed., Jones, M., Bradley, J., Machulak, M., and
              P. Hunt, "OAuth 2.0 Dynamic Client Registration Protocol",
              RFC 7591, DOI 10.17487/RFC7591, July 2015,
              <http://www.rfc-editor.org/info/rfc7591>.

Appendix A.  Example

   In the following example we have these actors:

                  Federation Operator (FO)

                  Federation Member representative (FMR)

                  Relying Party (RP), whether this is in fact an OpenID
                  Connect RP or someone acting on behalf of the RP is
                  immaterial.

   The necessary steps for adding a Relying Party to a federation

   The following JWKS represents the signing key that the Federation
   Operator is using in the example below:






















Hedberg, et al.        Expires September 26, 2017              [Page 17]

                        OpenID Connect Federation             March 2017


   {
     "keys": [
       {
         "d": "DpFZnXz8fcKmOxFPfPdh3aZz44U2ZWm1Mxy6CiqHYcA80KVAY
   -wrjKFV4eiSl9JENpoWXax4dpMcyJa2TdAXL9-4WqGNQAPRvdOfHcJM_uaBSG
   ZwsuqAqZi_0sbNxurGgbjKV38ra-iz42fcSXHCgNdMJjCi3VixS8iASHGU82R
   6mYyVeMWdX_j2RG--41PDxud4xSYCKDuR6s2qlLVXyCZqFu_Yzl5zChiNxZJ_
   ggcxyL6i_hngi1oSbbVjgNKTcJNaIdOfzzcnUd5J9GP941-tylwg7NC3gRo1b
   XlUx6HFx3LkYe1PdroHhQd92RPyJdPqHDfbizJ4sjXN4cNq-Q",
         "e": "AQAB",
         "kid": "uZX0-P1-TMsZRqK1SeXpdLgsLoeUNskN2W_rwBNKAtc",
         "kty": "RSA",
         "n": "rqJ_CFECPF2nBD1eXkFonJo5gGcbnCvDudm_-7f1thcQqiuY2
   Xz0eKqQ2HP3Nw-wP5q2hKbNVgAQSBbMp_AgNwRFmboJKF4cFEr3ZtmvO94bM6
   L15vUR2HNyX-4LaZ6S9u35jSikOVJDt1BK-72w_DKeb8O8qa2dl9k7F6QZJQT
   6Nfh5rEALQLOZgwBgZAUpu2tQUh3TFpwe3J_rQtCBbI3r0W1XoM1pD3EXTm9M
   I_aANRL82rh7_ZqLwGeBprD3F6ns9i5-psQ0UZ-2eVjN6J1um40U6ysu3QjFU
   ZEwb0yxNVx2D9bzOPMHwo6GAzePhJ46rI8NQ0NwJdB7lNvrhw",
         "p": "y4VcmM4QZoIjsGlTE7jvkJzYAud9Hz3uexVdeTShHnS-btLyS
   SP70EWdvICkHK7Z4KikNZaD3cET978LmkoG03WZcs7iEEg7hQ0N7ePMv7P1w6
   X1Z2_IeWml0c4iFSMaGPJk8a65HgBZ8fYPXFtERI7e1M--oqCrsTFikP8wYQU
   ",
         "q": "26pTV-JNgwx3LMrqEKIoIvHwLKfjFouRZXtTnOJP9G9BZ9vhA
   n1qX06M-xW02G3qGzhQEpNZKMj54APNcqkg4PH1wMJmJ-cs1T44KoNhhihoHd
   6awT7PGNMo9I728CwYfkM3ZW-BsgGBzQcfdI043cV3ebXzIEWwPbqTR44p8Bs
   ",
         "use": "sig"
       }
     ]
   }

A.1.  Relying Party joining a federation

A.1.1.  Step 1 - FMR creates its signing key pair.

   The Agent for the organisation creates its signing key pair.















Hedberg, et al.        Expires September 26, 2017              [Page 18]

                        OpenID Connect Federation             March 2017


   {
     "keys": [
       {
         "d": "RJmqe2KiVOShoTMaZBmoMLkmeZY97PW3TOgSGDgZejL6I2qdh
   NlBAa3e9Nz6ggkWpxEy6IGNGetwNwS9aYA_Z6m45kaaUHXGKol_R_5s4TJryX
   UppxWDuHScE_dVcfzlusm9Cq8J-U-xoaoKL36I3rakCJ_dWpsGNDpYSMenXcX
   uX-gJ5-HvSTETV5Bp23izUF4BH8TSVWniD8Vk5Hv8EtWVqsqc7YmIG1zW_ctJ
   hK7peymmNIVpcGpIxaT8agUOS-hcNxpN4AlYrELn2twzq8tXp5bPZNiHHNXgz
   XANy5BgNFXXnZFqFiNiBn3agQxF2aiu4Ei5k5OidHTV8qeGWQ",
         "e": "AQAB",
         "kid": "z414hVxt2-nkbqgG3VFYOZGB3Miwuhe75SfWT1BQQTc",
         "kty": "RSA",
         "n": "waDXGJwu9pV3gMY7rtpq3OYSAG1HZy7qilGC3ULMxJxjhSQCJ
   7M9PBC4uoF_f5178FebpKBIoT3_YzqETt9Ry_6NA_mGBq6xtjEgnmNv6ktQj8
   hKI0tYheWRHMJIt2ay8IwnV-3LD0Q_Nn7E3YgGaJUBlzDgJxQQcRVGFEOcFL-
   7TiKtVdPmPDGcSF7FivaGJO-MVqmDkCsZVMTZoqmKeuaqbshsDjxy9GaiImQL
   e8tyzkhxEoG7qvovlGoV4AE8WroMinx0qWvglR8n041qQhrUMtoQMDCI53uLy
   6ZSR0jbNNEwvDBbiqD4Hm3piAwTUrGKWYLxbeicK_7A6gF2Sw",
         "p": "3SBEMBmIGztaOpCH-C9vwr80SyXm6M1uwCoKjBOiy_-kJ03jv
   acztd5CEOcCvhRLVvl3rEYSP97DR_Eju-jlKWi92tbIECGvWzgszMHLdEdjvV
   vpJLlOSAfFMYsaPxa1Sw2HS7RgoAwIxD5HVcdPK-3cJ5Gi0hInbz-ufrH4ru0
   ",
         "q": "4CphaFI0lSGr0HNifXJBN5JkXmCZp6WX06cI4pR_DwZAHTojc
   8dK1ECMHU2oP2nPn1pmAVZj4p98vO0MfTxSgNB15EmDRkic_cmS-SenUUf7Pl
   3avJwpZq_qxYPqDajAgWHuuci-2zKXRlKS_ZCz1MAmx-gV0We3AnletWV52xc
   ",
         "use": "sig"
       }
     ]
   }

A.1.2.  Step 2 - The FMR submits registration data to FO

   The Federation member representative (FMR) submits registration data
   to the Federation Operator (FO).
















Hedberg, et al.        Expires September 26, 2017              [Page 19]

                        OpenID Connect Federation             March 2017


   {
     "contacts": [
       "dev_admin@example.com"
     ],
     "logo_uri": "https://example.com/logo.jpg",
     "policy_uri": "https://example.com/policy.html",
     "signing_key": {
       "e": "AQAB",
       "kid": "z414hVxt2-nkbqgG3VFYOZGB3Miwuhe75SfWT1BQQTc",
       "kty": "RSA",
       "n": "waDXGJwu9pV3gMY7rtpq3OYSAG1HZy7qilGC3ULMxJxjhSQCJ7M
   9PBC4uoF_f5178FebpKBIoT3_YzqETt9Ry_6NA_mGBq6xtjEgnmNv6ktQj8hK
   I0tYheWRHMJIt2ay8IwnV-3LD0Q_Nn7E3YgGaJUBlzDgJxQQcRVGFEOcFL-7T
   iKtVdPmPDGcSF7FivaGJO-MVqmDkCsZVMTZoqmKeuaqbshsDjxy9GaiImQLe8
   tyzkhxEoG7qvovlGoV4AE8WroMinx0qWvglR8n041qQhrUMtoQMDCI53uLy6Z
   SR0jbNNEwvDBbiqD4Hm3piAwTUrGKWYLxbeicK_7A6gF2Sw",
       "use": "sig"
     },
     "tos_uri": "https://example.com/tos.html"
   }

A.1.3.  Step 3 - FO returns a signed metadata statement

   The FO returns a signed metadata statement containing the submitted
   registration data, and any applied policy restrictions like
   response_types, signing/encryption algorithms to be used and
   additional specific policy parameters like the ones specified above.

   This is an example of a metadata statement constructed by the FO
   before it is signed by the FO:





















Hedberg, et al.        Expires September 26, 2017              [Page 20]

                        OpenID Connect Federation             March 2017


   {
     "contacts": [
       "dev_admin@example.com"
     ],
     "exp": 1462438820,
     "iat": 1462438820,
     "iss": "https://swamid.sunet.se/",
     "jti": "e920396fc2cb4ac0aaeb229674fd286a",
     "kid": "uZX0-P1-TMsZRqK1SeXpdLgsLoeUNskN2W_rwBNKAtc",
     "logo_uri": "https://example.com/logo.jpg",
     "policy_uri": "https://example.com/policy.html",
     "response_types": [
       "code",
       "code id_token",
       "token"
     ],
     "scopes": [
       "openid",
       "email",
       "phone"
     ],
     "signing_key": {
       "e": "AQAB",
       "kid": "z414hVxt2-nkbqgG3VFYOZGB3Miwuhe75SfWT1BQQTc",
       "kty": "RSA",
       "n": "waDXGJwu9pV3gMY7rtpq3OYSAG1HZy7qilGC3ULMxJxjhSQCJ7M
   9PBC4uoF_f5178FebpKBIoT3_YzqETt9Ry_6NA_mGBq6xtjEgnmNv6ktQj8hK
   I0tYheWRHMJIt2ay8IwnV-3LD0Q_Nn7E3YgGaJUBlzDgJxQQcRVGFEOcFL-7T
   iKtVdPmPDGcSF7FivaGJO-MVqmDkCsZVMTZoqmKeuaqbshsDjxy9GaiImQLe8
   tyzkhxEoG7qvovlGoV4AE8WroMinx0qWvglR8n041qQhrUMtoQMDCI53uLy6Z
   SR0jbNNEwvDBbiqD4Hm3piAwTUrGKWYLxbeicK_7A6gF2Sw",
       "use": "sig"
     },
     "token_endpoint_auth_method": "private_key_jwt",
     "tos_uri": "https://example.com/tos.html"
   }

   The signed version of this metadata statement, or a link to it, is
   then expected to be included in the RPs client registration request
   before being signed by the FMR's signing key.

A.1.4.  Step 4 - The RP gets a signing key

   The RP gets a signing key.  This key will be used to sign the JWKS
   that is stored in a place pointed to by signed_jwks_uri.






Hedberg, et al.        Expires September 26, 2017              [Page 21]

                        OpenID Connect Federation             March 2017


   {
     "keys": [
       {
         "d": "BA0bo5OR3ht2KGDeAUpZsKv-Jjo9IKpYA2x7yQhcIH3bt9T24
   95pXVAHLQXXnZpjMenz7WPx94ajxIh96Bt59AYx4AwAEaBnPzK8vXLIP-A92N
   P3HV7vk0p8KWsrEdDwxBaypqRXxz7V5vPGQVnOGg2eKSlP5F4-HoGpU6xDRo8
   Lptcs5VNx0a9kKVqEu-YpQkc2z2uLRjl8urOu471sks38U03wRwWDElepUI28
   jEjhPydVSQw-E5w3yKhHTZeh1mVdNMp7_8LDzScP1Ah5VCRLFfrmx1bOXxXZW
   HpMD6vgghmaCQGmyhgEr3XNzHVlH4bfVI_2Vrxp6cxHpe3iYw",
         "e": "AQAB",
         "kid": "Tvd2gF4mcNtiYx6FyOOH83Xj_MkF-8yn_rD2Gm06RxY",
         "kty": "RSA",
         "n": "2kCKMUluhKV2INV3dS89WQ305J6JL8OJQ1cPk3GQ20Zvraa3D
   CntNns1xy9gynGYUQzom7LYAqcmpu7xFGNXH0gN8JyXcCiWl02IuD6lwS6N2d
   7y6xJm8-mUBiwVrAlhwWL1Bf8JRycRUQ51c6Y8yYrUf2pjeIFQBQEfUhcjNg1
   3L1OUDoWJizy5QhaTe4p2uezYhKlKtSHC7T6Brs6kWJA57j8BY5Tx4p6cyWRG
   sN58XXfmWg1hA1LjVIwgtSBvax7KRGUY6TXOd5Km2MvJgBOfqAYfh1z0wZRiB
   dUa0RzsXavf4HGjnwPknYcSY1MwKZCzz_W0_uAiGlHFlNwLSQ",
         "p": "5279rRhB4IBf5chMgrTVwsAEKWyEsRrIVs5xLFVA5rpOKLN6q
   GhLO6PU9jmsD7dYEa0IA-eTxVCCuMp09KEfyrRAn0OWpWdndu8IR_n2e4zZxB
   Xbf4WuIeZwxfM5PqKi5LOnp442CthmzbsVD2OLmlgSViWSAP9SLFOBGfniTqs",
         "q": "8WtasUyu9D9StGJkgolHjofbMnxXzRqpnA-QSV71htsQD3wof
   -vda8e8JkDLPPfAYuVYieCHeJYGsT9EHAG1Nyyr9OMzFeo73N1FdKGIGihWHS
   uvW6sRr6FTta12ZMN7Jkm3l2rQoZALgvMtdYdDGJ-D3gwusW5nNS3-xJqMPds",
         "use": "sig"
       }
     ]
   }

A.1.5.  Step 5 - RP produces a client registration request

   The RP produces a client registration request, adding to it
   information about the signing key.


















Hedberg, et al.        Expires September 26, 2017              [Page 22]

                        OpenID Connect Federation             March 2017


   {
     "application_type": "web",
     "signed_jwks_uri": "https://example.com/rp1/jwks.jws",
     "redirect_uris": [
       "https://example.com/rp1/callback"
     ],
     "response_types": [
       "code"
     ],
     "signing_key": {
       "e": "AQAB",
       "kid": "Tvd2gF4mcNtiYx6FyOOH83Xj_MkF-8yn_rD2Gm06RxY",
       "kty": "RSA",
       "n": "2kCKMUluhKV2INV3dS89WQ305J6JL8OJQ1cPk3GQ20Zvraa3DCntN
   ns1xy9gynGYUQzom7LYAqcmpu7xFGNXH0gN8JyXcCiWl02IuD6lwS6N2d7y6xJm
   8-mUBiwVrAlhwWL1Bf8JRycRUQ51c6Y8yYrUf2pjeIFQBQEfUhcjNg13L1OUDoW
   Jizy5QhaTe4p2uezYhKlKtSHC7T6Brs6kWJA57j8BY5Tx4p6cyWRGsN58XXfmWg
   1hA1LjVIwgtSBvax7KRGUY6TXOd5Km2MvJgBOfqAYfh1z0wZRiBdUa0RzsXavf4
   HGjnwPknYcSY1MwKZCzz_W0_uAiGlHFlNwLSQ",
       "use": "sig"
     }
   }

A.1.6.  Step 6 - Developer produces metadata statement for RP

   Developer produces metadata statement based on client registration
   request

   {
     "application_type": "web",
     "signed_jwks_uri": "https://example.com/rp1/jwks.jws",
     "redirect_uris": [
       "https://example.com/rp1/callback"
     ],
     "response_types": [
       "code"
     ],
     "signing_key": {
       "e": "AQAB",
       "kid": "Tvd2gF4mcNtiYx6FyOOH83Xj_MkF-8yn_rD2Gm06RxY",
       "kty": "RSA",
       "n": "2kCKMUluhKV2INV3dS89WQ305J6JL8OJQ1cPk3GQ20Zvraa3DCntN
   ns1xy9gynGYUQzom7LYAqcmpu7xFGNXH0gN8JyXcCiWl02IuD6lwS6N2d7y6xJm
   8-mUBiwVrAlhwWL1Bf8JRycRUQ51c6Y8yYrUf2pjeIFQBQEfUhcjNg13L1OUDoW
   Jizy5QhaTe4p2uezYhKlKtSHC7T6Brs6kWJA57j8BY5Tx4p6cyWRGsN58XXfmWg
   1hA1LjVIwgtSBvax7KRGUY6TXOd5Km2MvJgBOfqAYfh1z0wZRiBdUa0RzsXavf4
   HGjnwPknYcSY1MwKZCzz_W0_uAiGlHFlNwLSQ",
       "use": "sig"



Hedberg, et al.        Expires September 26, 2017              [Page 23]

                        OpenID Connect Federation             March 2017


     },
     "metadata_statements": [
       "eyJraWQiOiJ1WlgwLVAxLVRNc1pScUsxU2VYcGRMZ3NMb2VVTnNrTjJXX3
   J3Qk5LQXRjIiwiYWxnIjoiUlMyNTYifQ.eyJwb2xpY3lfdXJpIjogImh0dHBzOi
   8vZXhhbXBsZS5jb20vcG9saWN5Lmh0bWwiLCAidG9rZW5fZW5kcG9pbnRfYXV0a
   F9tZXRob2QiOiAicHJpdmF0ZV9rZXlfand0IiwgImNvbnRhY3RzIjogWyJkZXZf
   YWRtaW5AZXhhbXBsZS5jb20iXSwgImxvZ29fdXJpIjogImh0dHBzOi8vZXhhbXB
   sZS5jb20vbG9nby5qcGciLCAic2NvcGVzIjogWyJvcGVuaWQiLCAiZW1haWwiLC
   AicGhvbmUiXSwgImlhdCI6IDE0NjI0Mzg4MjAsICJpc3MiOiAiaHR0cHM6Ly9zd
   2FtaWQuc3VuZXQuc2UvIiwgImtpZCI6ICJ1WlgwLVAxLVRNc1pScUsxU2VYcGRM
   Z3NMb2VVTnNrTjJXX3J3Qk5LQXRjIiwgImp0aSI6ICJlOTIwMzk2ZmMyY2I0YWM
   wYWFlYjIyOTY3NGZkMjg2YSIsICJyZXNwb25zZV90eXBlcyI6IFsiY29kZSIsIC
   Jjb2RlIGlkX3Rva2VuIiwgInRva2VuIl0sICJzaWduaW5nX2tleSI6IHsiZSI6I
   CJBUUFCIiwgImtpZCI6ICJ6NDE0aFZ4dDItbmticWdHM1ZGWU9aR0IzTWl3dWhl
   NzVTZldUMUJRUVRjIiwgImt0eSI6ICJSU0EiLCAidXNlIjogInNpZyIsICJuIjo
   gIndhRFhHSnd1OXBWM2dNWTdydHBxM09ZU0FHMUhaeTdxaWxHQzNVTE14SnhqaF
   NRQ0o3TTlQQkM0dW9GX2Y1MTc4RmVicEtCSW9UM19ZenFFVHQ5UnlfNk5BX21HQ
   nE2eHRqRWdubU52Nmt0UWo4aEtJMHRZaGVXUkhNSkl0MmF5OEl3blYtM0xEMFFf
   Tm43RTNZZ0dhSlVCbHpEZ0p4UVFjUlZHRkVPY0ZMLTdUaUt0VmRQbVBER2NTRjd
   GaXZhR0pPLU1WcW1Ea0NzWlZNVFpvcW1LZXVhcWJzaHNEanh5OUdhaUltUUxlOH
   R5emtoeEVvRzdxdm92bEdvVjRBRThXcm9NaW54MHFXdmdsUjhuMDQxcVFoclVNd
   G9RTURDSTUzdUx5NlpTUjBqYk5ORXd2REJiaXFENEhtM3BpQXdUVXJHS1dZTHhi
   ZWljS183QTZnRjJTdyJ9LCAidG9zX3VyaSI6ICJodHRwczovL2V4YW1wbGUuY29
   tL3Rvcy5odG1sIiwgImV4cCI6IDE0NjI0Mzg4MjB9.ZVnHkrdGqQTP36UXwZhb9
   hhcIc1hgkYNd8dGsyS-uHojrr4lYqkAyDjCr39fJnGvRnJvm_-LQDBfaKFHyGjS
   Ci97uQAN72lWC-FRs-wuED0abhgSEyrpDBSG0enNvIyOP_BEbo5xx950MJrlcmO
   T9s2MCI2KPKV4Rt8ZIJUdLO5kWPlfzaHkRZenCnob7sKYY4mbFosrslT0ny51yF
   SbZLtvnc04dmR0Q8ccAYJkMfL4t-IIGrrKRbDB6x52_gqJ8REgbhfiN6StM6jwi
   v_UydOjLXvFpsl5_5AZWWubNaIzj-4eCIpPFYjxBaOGcs0FsmD1irBDIAIQodid
   YoI6aA"
     ]
   }

   and signs it.  We now have the signed metadata statement aka the
   metadata that the RP will present to the OP

A.1.7.  Step 7 - RP sends a client registration request to an OP

   The RP sends a client registration request to the OP












Hedberg, et al.        Expires September 26, 2017              [Page 24]

                        OpenID Connect Federation             March 2017


   {
     "redirect_uris": [
       "https://example.com/rp1/callback"
     ],
     "metadata_statement_uris": {
       "https://swamid.sunet.se/":
         "https://dev.example.com/rp1/idfed/swamid.jws",
     }
   }

A.1.8.  Step 8 - OP handles metadata statement

   The OP fetches the metadata statement from the URI
   'https://dev.example.com/rp1/idfed/swamid.jws' and then goes about
   unpacking the metadata.  At this point in time the OP doesn't have
   the necessary key to verify all the signatures of the metadata.
   Therefor it has to unpack the JWT without verifying the signatures.
   It will then get a JSON document looking like whats listed in
   Appendix A.1.6.  From this document it can extract the metadata
   statement which should be signed by a key belonging to the FO.  The
   OP should have the fetched the public version of that key from the FO
   at some time prior to this.  It can now verify the signature of the
   metadata statement and unpack the JWT.  The JSON document it then
   gets is the one listed in Appendix A.1.3.  The signing key specified
   in that document can now be extracted and used to verify the
   signature of the next part of the metadata.

   What's remaining now for the OP is to put all the pieces of the
   client registration request together.  It will have one piece from
   the level 0 request augmented with the federation policy and then
   another piece from the RP.

Appendix B.  Notices

   Copyright (c) 2016 The OpenID Foundation.

   The OpenID Foundation (OIDF) grants to any Contributor, developer,
   implementer, or other interested party a non-exclusive, royalty free,
   worldwide copyright license to reproduce, prepare derivative works
   from, distribute, perform and display, this Implementers Draft or
   Final Specification solely for the purposes of (i) developing
   specifications, and (ii) implementing Implementers Drafts and Final
   Specifications based on such documents, provided that attribution be
   made to the OIDF as the source of the material, but that such
   attribution does not indicate an endorsement by the OIDF.

   The technology described in this specification was made available
   from contributions from various sources, including members of the



Hedberg, et al.        Expires September 26, 2017              [Page 25]

                        OpenID Connect Federation             March 2017


   OpenID Foundation and others.  Although the OpenID Foundation has
   taken steps to help ensure that the technology is available for
   distribution, it takes no position regarding the validity or scope of
   any intellectual property or other rights that might be claimed to
   pertain to the implementation or use of the technology described in
   this specification or the extent to which any license under such
   rights might or might not be available; neither does it represent
   that it has made any independent effort to identify any such rights.
   The OpenID Foundation and the contributors to this specification make
   no (and hereby expressly disclaim any) warranties (express, implied,
   or otherwise), including implied warranties of merchantability, non-
   infringement, fitness for a particular purpose, or title, related to
   this specification, and the entire risk as to implementing this
   specification is assumed by the implementer.  The OpenID Intellectual
   Property Rights policy requires contributors to offer a patent
   promise not to assert certain patent claims against other
   contributors and against implementers.  The OpenID Foundation invites
   any interested party to bring to its attention any copyrights,
   patents, patent applications, or other proprietary rights that may
   cover technology that may be required to practice this specification.

Appendix C.  Document History

   [[ To be removed from the approved specification ]]

   -02

   o  Added federation_usage parameter

   o  Symbolic representation of signed metadata statements

   -01

   o  Generalizing the specification

   -00

   o  Created openid-connect-federation-1_0-00 from draft-hedberg-oidc-
      fed-01.

Authors' Addresses

   Roland Hedberg (editor)
   independent

   Email: roland@catalogix.se





Hedberg, et al.        Expires September 26, 2017              [Page 26]

                        OpenID Connect Federation             March 2017


   Samuel Gulliksson
   Schibsted Media Group

   Email: samuel.gulliksson@gmail.com


   Michael B. Jones
   Microsoft

   Email: mbj@microsoft.com
   URI:   http://self-issued.info/


   John Bradley
   Ping Identity

   Email: ve7jtb@ve7jtb.com
   URI:   http://www.thread-safe.com/

































Hedberg, et al.        Expires September 26, 2017              [Page 27]
